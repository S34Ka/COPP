[re]
DESCRIPTION
    This module provides regular expression matching operations similar to
    those found in Perl.  It supports both 8-bit and Unicode strings; both
    the pattern and the strings being processed can contain null bytes and
    characters outside the US ASCII range.
    
    Regular expressions can contain both special and ordinary characters.
    Most ordinary characters, like "A", "a", or "0", are the simplest
    regular expressions; they simply match themselves.  You can
    concatenate ordinary characters, so last matches the string 'last'.
    
    The special characters are:
        "."      Matches any character except a newline.
        "^"      Matches the start of the string.
        "$"      Matches the end of the string or just before the newline at
                 the end of the string.
        "*"      Matches 0 or more (greedy) repetitions of the preceding RE.
                 Greedy means that it will match as many repetitions as possible.
        "+"      Matches 1 or more (greedy) repetitions of the preceding RE.
        "?"      Matches 0 or 1 (greedy) of the preceding RE.
        *?,+?,?? Non-greedy versions of the previous three special characters.
        {m,n}    Matches from m to n repetitions of the preceding RE.
        {m,n}?   Non-greedy version of the above.
        "\\"     Either escapes special characters or signals a special sequence.
        []       Indicates a set of characters.
                 A "^" as the first character indicates a complementing set.
        "|"      A|B, creates an RE that will match either A or B.
        (...)    Matches the RE inside the parentheses.
                 The contents can be retrieved or matched later in the string.
        (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
        (?:...)  Non-grouping version of regular parentheses.
        (?P<name>...) The substring matched by the group is accessible by name.
        (?P=name)     Matches the text matched earlier by the group named name.
        (?#...)  A comment; ignored.
        (?=...)  Matches if ... matches next, but doesn't consume the string.
        (?!...)  Matches if ... doesn't match next.
        (?<=...) Matches if preceded by ... (must be fixed length).
        (?<!...) Matches if not preceded by ... (must be fixed length).
        (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                           the (optional) no pattern otherwise.
    
    The special sequences consist of "\\" and a character from the list
    below.  If the ordinary character is not on the list, then the
    resulting RE will match the second character.
        \number  Matches the contents of the group of the same number.
        \A       Matches only at the start of the string.
        \Z       Matches only at the end of the string.
        \b       Matches the empty string, but only at the start or end of a word.
        \B       Matches the empty string, but not at the start or end of a word.
        \d       Matches any decimal digit; equivalent to the set [0-9].
        \D       Matches any non-digit character; equivalent to the set [^0-9].
        \s       Matches any whitespace character; equivalent to [ \t\n\r\f\v].
        \S       Matches any non-whitespace character; equiv. to [^ \t\n\r\f\v].
        \w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
                 With LOCALE, it will match the set [0-9_] plus characters defined
                 as letters for the current locale.
        \W       Matches the complement of \w.
        \\       Matches a literal backslash.
    
    This module exports the following functions:
        match    Match a regular expression pattern to the beginning of a string.
        search   Search a string for the presence of a pattern.
        sub      Substitute occurrences of a pattern found in a string.
        subn     Same as sub, but also return the number of substitutions made.
        split    Split a string by the occurrences of a pattern.
        findall  Find all occurrences of a pattern in a string.
        finditer Return an iterator yielding a match object for each match.
        compile  Compile a pattern into a RegexObject.
        purge    Clear the regular expression cache.
        escape   Backslash all non-alphanumerics in a string.
    
    Some of the functions in this module takes flags as optional parameters:
        I  IGNORECASE  Perform case-insensitive matching.
        L  LOCALE      Make \w, \W, \b, \B, dependent on the current locale.
        M  MULTILINE   "^" matches the beginning of lines (after a newline)
                       as well as the string.
                       "$" matches the end of lines (before a newline) as well
                       as the end of the string.
        S  DOTALL      "." matches any character at all, including the newline.
        X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
        U  UNICODE     Make \w, \W, \b, \B, dependent on the Unicode locale.
    
    This module also defines an exception 'error'.

CLASSES
    exceptions.Exception(exceptions.BaseException)
        sre_constants.error
    
    class error(exceptions.Exception)
     |  Method resolution order:
     |      error
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message

FUNCTIONS
    compile(pattern, flags=0)
        Compile a regular expression pattern, returning a pattern object.
    
    escape(pattern)
        Escape all non-alphanumeric characters in pattern.
    
    findall(pattern, string, flags=0)
        Return a list of all non-overlapping matches in the string.
        
        If one or more groups are present in the pattern, return a
        list of groups; this will be a list of tuples if the pattern
        has more than one group.
        
        Empty matches are included in the result.
    
    finditer(pattern, string, flags=0)
        Return an iterator over all non-overlapping matches in the
        string.  For each match, the iterator returns a match object.
        
        Empty matches are included in the result.
    
    match(pattern, string, flags=0)
        Try to apply the pattern at the start of the string, returning
        a match object, or None if no match was found.
    
    purge()
        Clear the regular expression cache
    
    search(pattern, string, flags=0)
        Scan through string looking for a match to the pattern, returning
        a match object, or None if no match was found.
    
    split(pattern, string, maxsplit=0, flags=0)
        Split the source string by the occurrences of the pattern,
        returning a list containing the resulting substrings.
    
    sub(pattern, repl, string, count=0, flags=0)
        Return the string obtained by replacing the leftmost
        non-overlapping occurrences of the pattern in string by the
        replacement repl.  repl can be either a string or a callable;
        if a string, backslash escapes in it are processed.  If it is
        a callable, it's passed the match object and must return
        a replacement string to be used.
    
    subn(pattern, repl, string, count=0, flags=0)
        Return a 2-tuple containing (new_string, number).
        new_string is the string obtained by replacing the leftmost
        non-overlapping occurrences of the pattern in the source
        string by the replacement repl.  number is the number of
        substitutions that were made. repl can be either a string or a
        callable; if a string, backslash escapes in it are processed.
        If it is a callable, it's passed the match object and must
        return a replacement string to be used.
    
    template(pattern, flags=0)
        Compile a template pattern, returning a pattern object

[os]
DESCRIPTION
    This exports:
      - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
      - os.path is one of the modules posixpath, or ntpath
      - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
      - os.curdir is a string representing the current directory ('.' or ':')
      - os.pardir is a string representing the parent directory ('..' or '::')
      - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\')
      - os.extsep is the extension separator ('.' or '/')
      - os.altsep is the alternate pathname separator (None or '/')
      - os.pathsep is the component separator used in $PATH etc
      - os.linesep is the line separator in text files ('\r' or '\n' or '\r\n')
      - os.defpath is the default search path for executables
      - os.devnull is the file path of the null device ('/dev/null', etc.)
    
    Programs that import and use 'os' stand a better chance of being
    portable between different platforms.  Of course, they must then
    only use functions that are defined by all platforms (e.g., unlink
    and opendir), and leave all pathname manipulation to os.path
    (e.g., split and join).

CLASSES
    __builtin__.object
        nt.stat_result
        nt.statvfs_result
    exceptions.EnvironmentError(exceptions.StandardError)
        exceptions.OSError
    
    error = class OSError(EnvironmentError)
     |  OS system call failed.
     |  
     |  Method resolution order:
     |      OSError
     |      EnvironmentError
     |      StandardError
     |      Exception
     |      BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from EnvironmentError:
     |  
     |  __reduce__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from EnvironmentError:
     |  
     |  errno
     |      exception errno
     |  
     |  filename
     |      exception filename
     |  
     |  strerror
     |      exception strerror
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class stat_result(__builtin__.object)
     |  stat_result: Result from stat or lstat.
     |  
     |  This object may be accessed either as a tuple of
     |    (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)
     |  or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.
     |  
     |  Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev,
     |  or st_flags, they are available as attributes only.
     |  
     |  See os.stat for more information.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __hash__(...)
     |      x.__hash__() <==> hash(x)
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  st_atime
     |      time of last access
     |  
     |  st_ctime
     |      time of last change
     |  
     |  st_dev
     |      device
     |  
     |  st_gid
     |      group ID of owner
     |  
     |  st_ino
     |      inode
     |  
     |  st_mode
     |      protection bits
     |  
     |  st_mtime
     |      time of last modification
     |  
     |  st_nlink
     |      number of hard links
     |  
     |  st_size
     |      total size, in bytes
     |  
     |  st_uid
     |      user ID of owner
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  n_fields = 13
     |  
     |  n_sequence_fields = 10
     |  
     |  n_unnamed_fields = 3
    
    class statvfs_result(__builtin__.object)
     |  statvfs_result: Result from statvfs or fstatvfs.
     |  
     |  This object may be accessed either as a tuple of
     |    (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax),
     |  or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.
     |  
     |  See os.statvfs for more information.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __hash__(...)
     |      x.__hash__() <==> hash(x)
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  f_bavail
     |  
     |  f_bfree
     |  
     |  f_blocks
     |  
     |  f_bsize
     |  
     |  f_favail
     |  
     |  f_ffree
     |  
     |  f_files
     |  
     |  f_flag
     |  
     |  f_frsize
     |  
     |  f_namemax
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  n_fields = 10
     |  
     |  n_sequence_fields = 10
     |  
     |  n_unnamed_fields = 0

FUNCTIONS
    abort(...)
        abort() -> does not return!
        
        Abort the interpreter immediately.  This 'dumps core' or otherwise fails
        in the hardest way possible on the hosting operating system.
    
    access(...)
        access(path, mode) -> True if granted, False otherwise
        
        Use the real uid/gid to test for access to a path.  Note that most
        operations will use the effective uid/gid, therefore this routine can
        be used in a suid/sgid environment to test if the invoking user has the
        specified access to the path.  The mode argument can be F_OK to test
        existence, or the inclusive-OR of R_OK, W_OK, and X_OK.
    
    chdir(...)
        chdir(path)
        
        Change the current working directory to the specified path.
    
    chmod(...)
        chmod(path, mode)
        
        Change the access permissions of a file.
    
    close(...)
        close(fd)
        
        Close a file descriptor (for low level IO).
    
    closerange(...)
        closerange(fd_low, fd_high)
        
        Closes all file descriptors in [fd_low, fd_high), ignoring errors.
    
    dup(...)
        dup(fd) -> fd2
        
        Return a duplicate of a file descriptor.
    
    dup2(...)
        dup2(old_fd, new_fd)
        
        Duplicate file descriptor.
    
    execl(file, *args)
        execl(file, *args)
        
        Execute the executable file with argument list args, replacing the
        current process.
    
    execle(file, *args)
        execle(file, *args, env)
        
        Execute the executable file with argument list args and
        environment env, replacing the current process.
    
    execlp(file, *args)
        execlp(file, *args)
        
        Execute the executable file (which is searched for along $PATH)
        with argument list args, replacing the current process.
    
    execlpe(file, *args)
        execlpe(file, *args, env)
        
        Execute the executable file (which is searched for along $PATH)
        with argument list args and environment env, replacing the current
        process.
    
    execv(...)
        execv(path, args)
        
        Execute an executable path with arguments, replacing current process.
        
            path: path of executable file
            args: tuple or list of strings
    
    execve(...)
        execve(path, args, env)
        
        Execute a path with arguments and environment, replacing current process.
        
            path: path of executable file
            args: tuple or list of arguments
            env: dictionary of strings mapping to strings
    
    execvp(file, args)
        execvp(file, args)
        
        Execute the executable file (which is searched for along $PATH)
        with argument list args, replacing the current process.
        args may be a list or tuple of strings.
    
    execvpe(file, args, env)
        execvpe(file, args, env)
        
        Execute the executable file (which is searched for along $PATH)
        with argument list args and environment env , replacing the
        current process.
        args may be a list or tuple of strings.
    
    fdopen(...)
        fdopen(fd [, mode='r' [, bufsize]]) -> file_object
        
        Return an open file object connected to a file descriptor.
    
    fstat(...)
        fstat(fd) -> stat result
        
        Like stat(), but for an open file descriptor.
    
    fsync(...)
        fsync(fildes)
        
        force write of file with filedescriptor to disk.
    
    getcwd(...)
        getcwd() -> path
        
        Return a string representing the current working directory.
    
    getcwdu(...)
        getcwdu() -> path
        
        Return a unicode string representing the current working directory.
    
    getenv(key, default=None)
        Get an environment variable, return None if it doesn't exist.
        The optional second argument can specify an alternate default.
    
    getpid(...)
        getpid() -> pid
        
        Return the current process id
    
    isatty(...)
        isatty(fd) -> bool
        
        Return True if the file descriptor 'fd' is an open file descriptor
        connected to the slave end of a terminal.
    
    kill(...)
        kill(pid, sig)
        
        Kill a process with a signal.
    
    listdir(...)
        listdir(path) -> list_of_strings
        
        Return a list containing the names of the entries in the directory.
        
            path: path of directory to list
        
        The list is in arbitrary order.  It does not include the special
        entries '.' and '..' even if they are present in the directory.
    
    lseek(...)
        lseek(fd, pos, how) -> newpos
        
        Set the current position of a file descriptor.
        Return the new cursor position in bytes, starting from the beginning.
    
    lstat(...)
        lstat(path) -> stat result
        
        Like stat(path), but do not follow symbolic links.
    
    makedirs(name, mode=511)
        makedirs(path [, mode=0777])
        
        Super-mkdir; create a leaf directory and all intermediate ones.
        Works like mkdir, except that any intermediate path segment (not
        just the rightmost) will be created if it does not exist.  This is
        recursive.
    
    mkdir(...)
        mkdir(path [, mode=0777])
        
        Create a directory.
    
    open(...)
        open(filename, flag [, mode=0777]) -> fd
        
        Open a file (for low level IO).
    
    pipe(...)
        pipe() -> (read_end, write_end)
        
        Create a pipe.
    
    popen(...)
        popen(command [, mode='r' [, bufsize]]) -> pipe
        
        Open a pipe to/from a command returning a file object.
    
    popen2(...)
    
    popen3(...)
    
    popen4(...)
    
    putenv(...)
        putenv(key, value)
        
        Change or add an environment variable.
    
    read(...)
        read(fd, buffersize) -> string
        
        Read a file descriptor.
    
    remove(...)
        remove(path)
        
        Remove a file (same as unlink(path)).
    
    removedirs(name)
        removedirs(path)
        
        Super-rmdir; remove a leaf directory and all empty intermediate
        ones.  Works like rmdir except that, if the leaf directory is
        successfully removed, directories corresponding to rightmost path
        segments will be pruned away until either the whole path is
        consumed or an error occurs.  Errors during this latter phase are
        ignored -- they generally mean that a directory was not empty.
    
    rename(...)
        rename(old, new)
        
        Rename a file or directory.
    
    renames(old, new)
        renames(old, new)
        
        Super-rename; create directories as necessary and delete any left
        empty.  Works like rename, except creation of any intermediate
        directories needed to make the new pathname good is attempted
        first.  After the rename, directories corresponding to rightmost
        path segments of the old name will be pruned until either the
        whole path is consumed or a nonempty directory is found.
        
        Note: this function can fail with the new directory structure made
        if you lack permissions needed to unlink the leaf directory or
        file.
    
    rmdir(...)
        rmdir(path)
        
        Remove a directory.
    
    spawnl(mode, file, *args)
        spawnl(mode, file, *args) -> integer
        
        Execute file with arguments from args in a subprocess.
        If mode == P_NOWAIT return the pid of the process.
        If mode == P_WAIT return the process's exit code if it exits normally;
        otherwise return -SIG, where SIG is the signal that killed it.
    
    spawnle(mode, file, *args)
        spawnle(mode, file, *args, env) -> integer
        
        Execute file with arguments from args in a subprocess with the
        supplied environment.
        If mode == P_NOWAIT return the pid of the process.
        If mode == P_WAIT return the process's exit code if it exits normally;
        otherwise return -SIG, where SIG is the signal that killed it.
    
    spawnv(...)
        spawnv(mode, path, args)
        
        Execute the program 'path' in a new process.
        
            mode: mode of process creation
            path: path of executable file
            args: tuple or list of strings
    
    spawnve(...)
        spawnve(mode, path, args, env)
        
        Execute the program 'path' in a new process.
        
            mode: mode of process creation
            path: path of executable file
            args: tuple or list of arguments
            env: dictionary of strings mapping to strings
    
    startfile(...)
        startfile(filepath [, operation]) - Start a file with its associated
        application.
        
        When "operation" is not specified or "open", this acts like
        double-clicking the file in Explorer, or giving the file name as an
        argument to the DOS "start" command: the file is opened with whatever
        application (if any) its extension is associated.
        When another "operation" is given, it specifies what should be done with
        the file.  A typical operation is "print".
        
        startfile returns as soon as the associated application is launched.
        There is no option to wait for the application to close, and no way
        to retrieve the application's exit status.
        
        The filepath is relative to the current directory.  If you want to use
        an absolute path, make sure the first character is not a slash ("/");
        the underlying Win32 ShellExecute function doesn't work if it is.
    
    stat(...)
        stat(path) -> stat result
        
        Perform a stat system call on the given path.
    
    stat_float_times(...)
        stat_float_times([newval]) -> oldval
        
        Determine whether os.[lf]stat represents time stamps as float objects.
        If newval is True, future calls to stat() return floats, if it is False,
        future calls return ints. 
        If newval is omitted, return the current setting.
    
    strerror(...)
        strerror(code) -> string
        
        Translate an error code to a message string.
    
    system(...)
        system(command) -> exit_status
        
        Execute the command (a string) in a subshell.
    
    tempnam(...)
        tempnam([dir[, prefix]]) -> string
        
        Return a unique name for a temporary file.
        The directory and a prefix may be specified as strings; they may be omitted
        or None if not needed.
    
    times(...)
        times() -> (utime, stime, cutime, cstime, elapsed_time)
        
        Return a tuple of floating point numbers indicating process times.
    
    tmpfile(...)
        tmpfile() -> file object
        
        Create a temporary file with no directory entries.
    
    tmpnam(...)
        tmpnam() -> string
        
        Return a unique name for a temporary file.
    
    umask(...)
        umask(new_mask) -> old_mask
        
        Set the current numeric umask and return the previous umask.
    
    unlink(...)
        unlink(path)
        
        Remove a file (same as remove(path)).
    
    urandom(...)
        urandom(n) -> str
        
        Return n random bytes suitable for cryptographic use.
    
    utime(...)
        utime(path, (atime, mtime))
        utime(path, None)
        
        Set the access and modified time of the file to the given values.  If the
        second form is used, set the access and modified times to the current time.
    
    waitpid(...)
        waitpid(pid, options) -> (pid, status << 8)
        
        Wait for completion of a given process.  options is ignored on Windows.
    
    walk(top, topdown=True, onerror=None, followlinks=False)
        Directory tree generator.
        
        For each directory in the directory tree rooted at top (including top
        itself, but excluding '.' and '..'), yields a 3-tuple
        
            dirpath, dirnames, filenames
        
        dirpath is a string, the path to the directory.  dirnames is a list of
        the names of the subdirectories in dirpath (excluding '.' and '..').
        filenames is a list of the names of the non-directory files in dirpath.
        Note that the names in the lists are just names, with no path components.
        To get a full path (which begins with top) to a file or directory in
        dirpath, do os.path.join(dirpath, name).
        
        If optional arg 'topdown' is true or not specified, the triple for a
        directory is generated before the triples for any of its subdirectories
        (directories are generated top down).  If topdown is false, the triple
        for a directory is generated after the triples for all of its
        subdirectories (directories are generated bottom up).
        
        When topdown is true, the caller can modify the dirnames list in-place
        (e.g., via del or slice assignment), and walk will only recurse into the
        subdirectories whose names remain in dirnames; this can be used to prune the
        search, or to impose a specific order of visiting.  Modifying dirnames when
        topdown is false is ineffective, since the directories in dirnames have
        already been generated by the time dirnames itself is generated. No matter
        the value of topdown, the list of subdirectories is retrieved before the
        tuples for the directory and its subdirectories are generated.
        
        By default errors from the os.listdir() call are ignored.  If
        optional arg 'onerror' is specified, it should be a function; it
        will be called with one argument, an os.error instance.  It can
        report the error to continue with the walk, or raise the exception
        to abort the walk.  Note that the filename is available as the
        filename attribute of the exception object.
        
        By default, os.walk does not follow symbolic links to subdirectories on
        systems that support them.  In order to get this functionality, set the
        optional argument 'followlinks' to true.
        
        Caution:  if you pass a relative pathname for top, don't change the
        current working directory between resumptions of walk.  walk never
        changes the current directory, and assumes that the client doesn't
        either.
        
        Example:
        
        import os
        from os.path import join, getsize
        for root, dirs, files in os.walk('python/Lib/email'):
            print root, "consumes",
            print sum([getsize(join(root, name)) for name in files]),
            print "bytes in", len(files), "non-directory files"
            if 'CVS' in dirs:
                dirs.remove('CVS')  # don't visit CVS directories
    
    write(...)
        write(fd, string) -> byteswritten
        
        Write a string to a file descriptor.

[sys]
DESCRIPTION
    This module provides access to some objects used or maintained by the
    interpreter and to functions that interact strongly with the interpreter.
    
    Dynamic objects:
    
    argv -- command line arguments; argv[0] is the script pathname if known
    path -- module search path; path[0] is the script directory, else ''
    modules -- dictionary of loaded modules
    
    displayhook -- called to show results in an interactive session
    excepthook -- called to handle any uncaught exception other than SystemExit
      To customize printing in an interactive session or to install a custom
      top-level exception handler, assign other functions to replace these.
    
    exitfunc -- if sys.exitfunc exists, this routine is called when Python exits
      Assigning to sys.exitfunc is deprecated; use the atexit module instead.
    
    stdin -- standard input file object; used by raw_input() and input()
    stdout -- standard output file object; used by the print statement
    stderr -- standard error object; used for error messages
      By assigning other file objects (or objects that behave like files)
      to these, it is possible to redirect all of the interpreter's I/O.
    
    last_type -- type of last uncaught exception
    last_value -- value of last uncaught exception
    last_traceback -- traceback of last uncaught exception
      These three are only available in an interactive session after a
      traceback has been printed.
    
    exc_type -- type of exception currently being handled
    exc_value -- value of exception currently being handled
    exc_traceback -- traceback of exception currently being handled
      The function exc_info() should be used instead of these three,
      because it is thread-safe.
    
    Static objects:
    
    float_info -- a dict with information about the float inplementation.
    long_info -- a struct sequence with information about the long implementation.
    maxint -- the largest supported integer (the smallest is -maxint-1)
    maxsize -- the largest supported length of containers.
    maxunicode -- the largest supported character
    builtin_module_names -- tuple of module names built into this interpreter
    version -- the version of this interpreter as a string
    version_info -- version information as a named tuple
    hexversion -- version information encoded as a single integer
    copyright -- copyright notice pertaining to this interpreter
    platform -- platform identifier
    executable -- absolute path of the executable binary of the Python interpreter
    prefix -- prefix used to find the Python library
    exec_prefix -- prefix used to find the machine-specific Python library
    float_repr_style -- string indicating the style of repr() output for floats
    dllhandle -- [Windows only] integer handle of the Python DLL
    winver -- [Windows only] version number of the Python DLL
    __stdin__ -- the original stdin; don't touch!
    __stdout__ -- the original stdout; don't touch!
    __stderr__ -- the original stderr; don't touch!
    __displayhook__ -- the original displayhook; don't touch!
    __excepthook__ -- the original excepthook; don't touch!
    
    Functions:
    
    displayhook() -- print an object to the screen, and save it in __builtin__._
    excepthook() -- print an exception and its traceback to sys.stderr
    exc_info() -- return thread-safe information about the current exception
    exc_clear() -- clear the exception state for the current thread
    exit() -- exit the interpreter by raising SystemExit
    getdlopenflags() -- returns flags to be used for dlopen() calls
    getprofile() -- get the global profiling function
    getrefcount() -- return the reference count for an object (plus one :-)
    getrecursionlimit() -- return the max recursion depth for the interpreter
    getsizeof() -- return the size of an object in bytes
    gettrace() -- get the global debug tracing function
    setcheckinterval() -- control how often the interpreter checks for events
    setdlopenflags() -- set the flags to be used for dlopen() calls
    setprofile() -- set the global profiling function
    setrecursionlimit() -- set the max recursion depth for the interpreter
    settrace() -- set the global debug tracing function

FUNCTIONS
    __displayhook__ = displayhook(...)
        displayhook(object) -> None
        
        Print an object to sys.stdout and also save it in __builtin__._
    
    __excepthook__ = excepthook(...)
        excepthook(exctype, value, traceback) -> None
        
        Handle an exception by displaying it with a traceback on sys.stderr.
    
    call_tracing(...)
        call_tracing(func, args) -> object
        
        Call func(*args), while tracing is enabled.  The tracing state is
        saved, and restored afterwards.  This is intended to be called from
        a debugger from a checkpoint, to recursively debug some other code.
    
    callstats(...)
        callstats() -> tuple of integers
        
        Return a tuple of function call statistics, if CALL_PROFILE was defined
        when Python was built.  Otherwise, return None.
        
        When enabled, this function returns detailed, implementation-specific
        details about the number of function calls executed. The return value is
        a 11-tuple where the entries in the tuple are counts of:
        0. all function calls
        1. calls to PyFunction_Type objects
        2. PyFunction calls that do not create an argument tuple
        3. PyFunction calls that do not create an argument tuple
           and bypass PyEval_EvalCodeEx()
        4. PyMethod calls
        5. PyMethod calls on bound methods
        6. PyType calls
        7. PyCFunction calls
        8. generator calls
        9. All other calls
        10. Number of stack pops performed by call_function()
    
    displayhook(...)
        displayhook(object) -> None
        
        Print an object to sys.stdout and also save it in __builtin__._
    
    exc_clear(...)
        exc_clear() -> None
        
        Clear global information on the current exception.  Subsequent calls to
        exc_info() will return (None,None,None) until another exception is raised
        in the current thread or the execution stack returns to a frame where
        another exception is being handled.
    
    exc_info(...)
        exc_info() -> (type, value, traceback)
        
        Return information about the most recent exception caught by an except
        clause in the current stack frame or in an older stack frame.
    
    excepthook(...)
        excepthook(exctype, value, traceback) -> None
        
        Handle an exception by displaying it with a traceback on sys.stderr.
    
    exit(...)
        exit([status])
        
        Exit the interpreter by raising SystemExit(status).
        If the status is omitted or None, it defaults to zero (i.e., success).
        If the status is an integer, it will be used as the system exit status.
        If it is another kind of object, it will be printed and the system
        exit status will be one (i.e., failure).
    
    getcheckinterval(...)
        getcheckinterval() -> current check interval; see setcheckinterval().
    
    getdefaultencoding(...)
        getdefaultencoding() -> string
        
        Return the current default string encoding used by the Unicode 
        implementation.
    
    getfilesystemencoding(...)
        getfilesystemencoding() -> string
        
        Return the encoding used to convert Unicode filenames in
        operating system filenames.
    
    getprofile(...)
        getprofile()
        
        Return the profiling function set with sys.setprofile.
        See the profiler chapter in the library manual.
    
    getrecursionlimit(...)
        getrecursionlimit()
        
        Return the current value of the recursion limit, the maximum depth
        of the Python interpreter stack.  This limit prevents infinite
        recursion from causing an overflow of the C stack and crashing Python.
    
    getrefcount(...)
        getrefcount(object) -> integer
        
        Return the reference count of object.  The count returned is generally
        one higher than you might expect, because it includes the (temporary)
        reference as an argument to getrefcount().
    
    getsizeof(...)
        getsizeof(object, default) -> int
        
        Return the size of object in bytes.
    
    gettrace(...)
        gettrace()
        
        Return the global debug tracing function set with sys.settrace.
        See the debugger chapter in the library manual.
    
    getwindowsversion(...)
        getwindowsversion()
        
        Return information about the running version of Windows as a named tuple.
        The members are named: major, minor, build, platform, service_pack,
        service_pack_major, service_pack_minor, suite_mask, and product_type. For
        backward compatibility, only the first 5 items are available by indexing.
        All elements are numbers, except service_pack which is a string. Platform
        may be 0 for win32s, 1 for Windows 9x/ME, 2 for Windows NT/2000/XP/Vista/7,
        3 for Windows CE. Product_type may be 1 for a workstation, 2 for a domain
        controller, 3 for a server.
    
    setcheckinterval(...)
        setcheckinterval(n)
        
        Tell the Python interpreter to check for asynchronous events every
        n instructions.  This also affects how often thread switches occur.
    
    setprofile(...)
        setprofile(function)
        
        Set the profiling function.  It will be called on each function call
        and return.  See the profiler chapter in the library manual.
    
    setrecursionlimit(...)
        setrecursionlimit(n)
        
        Set the maximum depth of the Python interpreter stack to n.  This
        limit prevents infinite recursion from causing an overflow of the C
        stack and crashing Python.  The highest possible limit is platform-
        dependent.
    
    settrace(...)
        settrace(function)
        
        Set the global debug tracing function.  It will be called on each
        function call.  See the debugger chapter in the library manual.

[collections]
DESCRIPTION
    This module implements specialized container datatypes providing
    alternatives to Python's general purpose built-in containers, dict,
    list, set, and tuple.
    
    * namedtuple   factory function for creating tuple subclasses with named fields
    * deque        list-like container with fast appends and pops on either end
    * Counter      dict subclass for counting hashable objects
    * OrderedDict  dict subclass that remembers the order entries were added
    * defaultdict  dict subclass that calls a factory function to supply missing values

CLASSES
    __builtin__.dict(__builtin__.object)
        Counter
        OrderedDict
        defaultdict
    __builtin__.object
        _abcoll.Callable
        _abcoll.Container
        _abcoll.Hashable
        _abcoll.Iterable
            _abcoll.Iterator
        _abcoll.Sized
            _abcoll.Mapping(_abcoll.Sized, _abcoll.Iterable, _abcoll.Container)
                _abcoll.MutableMapping
            _abcoll.MappingView
                _abcoll.ItemsView(_abcoll.MappingView, _abcoll.Set)
                _abcoll.KeysView(_abcoll.MappingView, _abcoll.Set)
                _abcoll.ValuesView
            _abcoll.Sequence(_abcoll.Sized, _abcoll.Iterable, _abcoll.Container)
                _abcoll.MutableSequence
            _abcoll.Set(_abcoll.Sized, _abcoll.Iterable, _abcoll.Container)
                _abcoll.MutableSet
        deque
    
    class Callable(__builtin__.object)
     |  Methods defined here:
     |  
     |  __call__(self, *args, **kwds)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset(['__call__'])
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class Container(__builtin__.object)
     |  Methods defined here:
     |  
     |  __contains__(self, x)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset(['__contains__'])
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class Counter(__builtin__.dict)
     |  Dict subclass for counting hashable items.  Sometimes called a bag
     |  or multiset.  Elements are stored as dictionary keys and their counts
     |  are stored as dictionary values.
     |  
     |  >>> c = Counter('abcdeabcdabcaba')  # count elements from a string
     |  
     |  >>> c.most_common(3)                # three most common elements
     |  [('a', 5), ('b', 4), ('c', 3)]
     |  >>> sorted(c)                       # list all unique elements
     |  ['a', 'b', 'c', 'd', 'e']
     |  >>> ''.join(sorted(c.elements()))   # list elements with repetitions
     |  'aaaaabbbbcccdde'
     |  >>> sum(c.values())                 # total of all counts
     |  15
     |  
     |  >>> c['a']                          # count of letter 'a'
     |  5
     |  >>> for elem in 'shazam':           # update counts from an iterable
     |  ...     c[elem] += 1                # by adding 1 to each element's count
     |  >>> c['a']                          # now there are seven 'a'
     |  7
     |  >>> del c['b']                      # remove all 'b'
     |  >>> c['b']                          # now there are zero 'b'
     |  0
     |  
     |  >>> d = Counter('simsalabim')       # make another counter
     |  >>> c.update(d)                     # add in the second counter
     |  >>> c['a']                          # now there are nine 'a'
     |  9
     |  
     |  >>> c.clear()                       # empty the counter
     |  >>> c
     |  Counter()
     |  
     |  Note:  If a count is set to zero or reduced to zero, it will remain
     |  in the counter until the entry is deleted or the counter is cleared:
     |  
     |  >>> c = Counter('aaabbc')
     |  >>> c['b'] -= 2                     # reduce the count of 'b' by two
     |  >>> c.most_common()                 # 'b' is still in, but its count is zero
     |  [('a', 3), ('c', 1), ('b', 0)]
     |  
     |  Method resolution order:
     |      Counter
     |      __builtin__.dict
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __add__(self, other)
     |      Add counts from two counters.
     |      
     |      >>> Counter('abbb') + Counter('bcc')
     |      Counter({'b': 4, 'c': 2, 'a': 1})
     |  
     |  __and__(self, other)
     |      Intersection is the minimum of corresponding counts.
     |      
     |      >>> Counter('abbb') & Counter('bcc')
     |      Counter({'b': 1})
     |  
     |  __delitem__(self, elem)
     |      Like dict.__delitem__() but does not raise KeyError for missing values.
     |  
     |  __init__(*args, **kwds)
     |      Create a new, empty Counter object.  And if given, count elements
     |      from an input iterable.  Or, initialize the count from another mapping
     |      of elements to their counts.
     |      
     |      >>> c = Counter()                           # a new, empty counter
     |      >>> c = Counter('gallahad')                 # a new counter from an iterable
     |      >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping
     |      >>> c = Counter(a=4, b=2)                   # a new counter from keyword args
     |  
     |  __missing__(self, key)
     |      The count of elements not in the Counter is zero.
     |  
     |  __or__(self, other)
     |      Union is the maximum of value in either of the input counters.
     |      
     |      >>> Counter('abbb') | Counter('bcc')
     |      Counter({'b': 3, 'c': 2, 'a': 1})
     |  
     |  __reduce__(self)
     |  
     |  __repr__(self)
     |  
     |  __sub__(self, other)
     |      Subtract count, but keep only results with positive counts.
     |      
     |      >>> Counter('abbbc') - Counter('bccd')
     |      Counter({'b': 2, 'a': 1})
     |  
     |  copy(self)
     |      Return a shallow copy.
     |  
     |  elements(self)
     |      Iterator over elements repeating each as many times as its count.
     |      
     |      >>> c = Counter('ABCABC')
     |      >>> sorted(c.elements())
     |      ['A', 'A', 'B', 'B', 'C', 'C']
     |      
     |      # Knuth's example for prime factors of 1836:  2**2 * 3**3 * 17**1
     |      >>> prime_factors = Counter({2: 2, 3: 3, 17: 1})
     |      >>> product = 1
     |      >>> for factor in prime_factors.elements():     # loop over factors
     |      ...     product *= factor                       # and multiply them
     |      >>> product
     |      1836
     |      
     |      Note, if an element's count has been set to zero or is a negative
     |      number, elements() will ignore it.
     |  
     |  most_common(self, n=None)
     |      List the n most common elements and their counts from the most
     |      common to the least.  If n is None, then list all element counts.
     |      
     |      >>> Counter('abcdeabcdabcaba').most_common(3)
     |      [('a', 5), ('b', 4), ('c', 3)]
     |  
     |  subtract(*args, **kwds)
     |      Like dict.update() but subtracts counts instead of replacing them.
     |      Counts can be reduced below zero.  Both the inputs and outputs are
     |      allowed to contain zero and negative counts.
     |      
     |      Source can be an iterable, a dictionary, or another Counter instance.
     |      
     |      >>> c = Counter('which')
     |      >>> c.subtract('witch')             # subtract elements from another iterable
     |      >>> c.subtract(Counter('watch'))    # subtract elements from another counter
     |      >>> c['h']                          # 2 in which, minus 1 in witch, minus 1 in watch
     |      0
     |      >>> c['w']                          # 1 in which, minus 1 in witch, minus 1 in watch
     |      -1
     |  
     |  update(*args, **kwds)
     |      Like dict.update() but add counts instead of replacing them.
     |      
     |      Source can be an iterable, a dictionary, or another Counter instance.
     |      
     |      >>> c = Counter('which')
     |      >>> c.update('witch')           # add elements from another iterable
     |      >>> d = Counter('watch')
     |      >>> c.update(d)                 # add elements from another counter
     |      >>> c['h']                      # four 'h' in which, witch, and watch
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  fromkeys(cls, iterable, v=None) from __builtin__.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from __builtin__.dict:
     |  
     |  __cmp__(...)
     |      x.__cmp__(y) <==> cmp(x,y)
     |  
     |  __contains__(...)
     |      D.__contains__(k) -> True if D has a key k, else False
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __sizeof__(...)
     |      D.__sizeof__() -> size of D in memory, in bytes
     |  
     |  clear(...)
     |      D.clear() -> None.  Remove all items from D.
     |  
     |  get(...)
     |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
     |  
     |  has_key(...)
     |      D.has_key(k) -> True if D has a key k, else False
     |  
     |  items(...)
     |      D.items() -> list of D's (key, value) pairs, as 2-tuples
     |  
     |  iteritems(...)
     |      D.iteritems() -> an iterator over the (key, value) items of D
     |  
     |  iterkeys(...)
     |      D.iterkeys() -> an iterator over the keys of D
     |  
     |  itervalues(...)
     |      D.itervalues() -> an iterator over the values of D
     |  
     |  keys(...)
     |      D.keys() -> list of D's keys
     |  
     |  pop(...)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |      If key is not found, d is returned if given, otherwise KeyError is raised
     |  
     |  popitem(...)
     |      D.popitem() -> (k, v), remove and return some (key, value) pair as a
     |      2-tuple; but raise KeyError if D is empty.
     |  
     |  setdefault(...)
     |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
     |  
     |  values(...)
     |      D.values() -> list of D's values
     |  
     |  viewitems(...)
     |      D.viewitems() -> a set-like object providing a view on D's items
     |  
     |  viewkeys(...)
     |      D.viewkeys() -> a set-like object providing a view on D's keys
     |  
     |  viewvalues(...)
     |      D.viewvalues() -> an object providing a view on D's values
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from __builtin__.dict:
     |  
     |  __hash__ = None
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Hashable(__builtin__.object)
     |  Methods defined here:
     |  
     |  __hash__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset(['__hash__'])
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class ItemsView(MappingView, Set)
     |  Method resolution order:
     |      ItemsView
     |      MappingView
     |      Set
     |      Sized
     |      Iterable
     |      Container
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, item)
     |  
     |  __iter__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset([])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MappingView:
     |  
     |  __init__(self, mapping)
     |  
     |  __len__(self)
     |  
     |  __repr__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Set:
     |  
     |  __and__(self, other)
     |  
     |  __eq__(self, other)
     |  
     |  __ge__(self, other)
     |  
     |  __gt__(self, other)
     |  
     |  __le__(self, other)
     |  
     |  __lt__(self, other)
     |  
     |  __ne__(self, other)
     |  
     |  __or__(self, other)
     |  
     |  __rand__ = __and__(self, other)
     |  
     |  __ror__ = __or__(self, other)
     |  
     |  __rsub__(self, other)
     |  
     |  __rxor__ = __xor__(self, other)
     |  
     |  __sub__(self, other)
     |  
     |  __xor__(self, other)
     |  
     |  isdisjoint(self, other)
     |      Return True if two sets have a null intersection.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Set:
     |  
     |  __hash__ = None
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from Sized:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Sized:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Sized:
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class Iterable(__builtin__.object)
     |  Methods defined here:
     |  
     |  __iter__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset(['__iter__'])
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class Iterator(Iterable)
     |  Method resolution order:
     |      Iterator
     |      Iterable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __iter__(self)
     |  
     |  next(self)
     |      Return the next item from the iterator. When exhausted, raise StopIteration
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset(['next'])
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Iterable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Iterable:
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class KeysView(MappingView, Set)
     |  Method resolution order:
     |      KeysView
     |      MappingView
     |      Set
     |      Sized
     |      Iterable
     |      Container
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, key)
     |  
     |  __iter__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset([])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MappingView:
     |  
     |  __init__(self, mapping)
     |  
     |  __len__(self)
     |  
     |  __repr__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Set:
     |  
     |  __and__(self, other)
     |  
     |  __eq__(self, other)
     |  
     |  __ge__(self, other)
     |  
     |  __gt__(self, other)
     |  
     |  __le__(self, other)
     |  
     |  __lt__(self, other)
     |  
     |  __ne__(self, other)
     |  
     |  __or__(self, other)
     |  
     |  __rand__ = __and__(self, other)
     |  
     |  __ror__ = __or__(self, other)
     |  
     |  __rsub__(self, other)
     |  
     |  __rxor__ = __xor__(self, other)
     |  
     |  __sub__(self, other)
     |  
     |  __xor__(self, other)
     |  
     |  isdisjoint(self, other)
     |      Return True if two sets have a null intersection.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Set:
     |  
     |  __hash__ = None
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from Sized:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Sized:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Sized:
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class Mapping(Sized, Iterable, Container)
     |  A Mapping is a generic container for associating key/value
     |  pairs.
     |  
     |  This class provides concrete generic implementations of all
     |  methods except for __getitem__, __iter__, and __len__.
     |  
     |  Method resolution order:
     |      Mapping
     |      Sized
     |      Iterable
     |      Container
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, key)
     |  
     |  __eq__(self, other)
     |  
     |  __getitem__(self, key)
     |  
     |  __ne__(self, other)
     |  
     |  get(self, key, default=None)
     |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
     |  
     |  items(self)
     |      D.items() -> list of D's (key, value) pairs, as 2-tuples
     |  
     |  iteritems(self)
     |      D.iteritems() -> an iterator over the (key, value) items of D
     |  
     |  iterkeys(self)
     |      D.iterkeys() -> an iterator over the keys of D
     |  
     |  itervalues(self)
     |      D.itervalues() -> an iterator over the values of D
     |  
     |  keys(self)
     |      D.keys() -> list of D's keys
     |  
     |  values(self)
     |      D.values() -> list of D's values
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset(['__getitem__', '__iter__', '__len__']...
     |  
     |  __hash__ = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Sized:
     |  
     |  __len__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from Sized:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Sized:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Sized:
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Iterable:
     |  
     |  __iter__(self)
    
    class MappingView(Sized)
     |  Method resolution order:
     |      MappingView
     |      Sized
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, mapping)
     |  
     |  __len__(self)
     |  
     |  __repr__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset([])
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from Sized:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Sized:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Sized:
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class MutableMapping(Mapping)
     |  A MutableMapping is a generic container for associating
     |  key/value pairs.
     |  
     |  This class provides concrete generic implementations of all
     |  methods except for __getitem__, __setitem__, __delitem__,
     |  __iter__, and __len__.
     |  
     |  Method resolution order:
     |      MutableMapping
     |      Mapping
     |      Sized
     |      Iterable
     |      Container
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __delitem__(self, key)
     |  
     |  __setitem__(self, key, value)
     |  
     |  clear(self)
     |      D.clear() -> None.  Remove all items from D.
     |  
     |  pop(self, key, default=<object object>)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |      If key is not found, d is returned if given, otherwise KeyError is raised.
     |  
     |  popitem(self)
     |      D.popitem() -> (k, v), remove and return some (key, value) pair
     |      as a 2-tuple; but raise KeyError if D is empty.
     |  
     |  setdefault(self, key, default=None)
     |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
     |  
     |  update(*args, **kwds)
     |      D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
     |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
     |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
     |      In either case, this is followed by: for k, v in F.items(): D[k] = v
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset(['__delitem__', '__getitem__', '__iter...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Mapping:
     |  
     |  __contains__(self, key)
     |  
     |  __eq__(self, other)
     |  
     |  __getitem__(self, key)
     |  
     |  __ne__(self, other)
     |  
     |  get(self, key, default=None)
     |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
     |  
     |  items(self)
     |      D.items() -> list of D's (key, value) pairs, as 2-tuples
     |  
     |  iteritems(self)
     |      D.iteritems() -> an iterator over the (key, value) items of D
     |  
     |  iterkeys(self)
     |      D.iterkeys() -> an iterator over the keys of D
     |  
     |  itervalues(self)
     |      D.itervalues() -> an iterator over the values of D
     |  
     |  keys(self)
     |      D.keys() -> list of D's keys
     |  
     |  values(self)
     |      D.values() -> list of D's values
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Mapping:
     |  
     |  __hash__ = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Sized:
     |  
     |  __len__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from Sized:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Sized:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Sized:
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Iterable:
     |  
     |  __iter__(self)
    
    class MutableSequence(Sequence)
     |  All the operations on a read-only sequence.
     |  
     |  Concrete subclasses must provide __new__ or __init__,
     |  __getitem__, __setitem__, __delitem__, __len__, and insert().
     |  
     |  Method resolution order:
     |      MutableSequence
     |      Sequence
     |      Sized
     |      Iterable
     |      Container
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __delitem__(self, index)
     |  
     |  __iadd__(self, values)
     |  
     |  __setitem__(self, index, value)
     |  
     |  append(self, value)
     |      S.append(object) -- append object to the end of the sequence
     |  
     |  extend(self, values)
     |      S.extend(iterable) -- extend sequence by appending elements from the iterable
     |  
     |  insert(self, index, value)
     |      S.insert(index, object) -- insert object before index
     |  
     |  pop(self, index=-1)
     |      S.pop([index]) -> item -- remove and return item at index (default last).
     |      Raise IndexError if list is empty or index is out of range.
     |  
     |  remove(self, value)
     |      S.remove(value) -- remove first occurrence of value.
     |      Raise ValueError if the value is not present.
     |  
     |  reverse(self)
     |      S.reverse() -- reverse *IN PLACE*
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset(['__delitem__', '__getitem__', '__len_...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Sequence:
     |  
     |  __contains__(self, value)
     |  
     |  __getitem__(self, index)
     |  
     |  __iter__(self)
     |  
     |  __reversed__(self)
     |  
     |  count(self, value)
     |      S.count(value) -> integer -- return number of occurrences of value
     |  
     |  index(self, value)
     |      S.index(value) -> integer -- return first index of value.
     |      Raises ValueError if the value is not present.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Sized:
     |  
     |  __len__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from Sized:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Sized:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Sized:
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class MutableSet(Set)
     |  A mutable set is a finite, iterable container.
     |  
     |  This class provides concrete generic implementations of all
     |  methods except for __contains__, __iter__, __len__,
     |  add(), and discard().
     |  
     |  To override the comparisons (presumably for speed, as the
     |  semantics are fixed), all you have to do is redefine __le__ and
     |  then the other operations will automatically follow suit.
     |  
     |  Method resolution order:
     |      MutableSet
     |      Set
     |      Sized
     |      Iterable
     |      Container
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __iand__(self, it)
     |  
     |  __ior__(self, it)
     |  
     |  __isub__(self, it)
     |  
     |  __ixor__(self, it)
     |  
     |  add(self, value)
     |      Add an element.
     |  
     |  clear(self)
     |      This is slow (creates N new iterators!) but effective.
     |  
     |  discard(self, value)
     |      Remove an element.  Do not raise an exception if absent.
     |  
     |  pop(self)
     |      Return the popped value.  Raise KeyError if empty.
     |  
     |  remove(self, value)
     |      Remove an element. If not a member, raise a KeyError.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset(['__contains__', '__iter__', '__len__'...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Set:
     |  
     |  __and__(self, other)
     |  
     |  __eq__(self, other)
     |  
     |  __ge__(self, other)
     |  
     |  __gt__(self, other)
     |  
     |  __le__(self, other)
     |  
     |  __lt__(self, other)
     |  
     |  __ne__(self, other)
     |  
     |  __or__(self, other)
     |  
     |  __rand__ = __and__(self, other)
     |  
     |  __ror__ = __or__(self, other)
     |  
     |  __rsub__(self, other)
     |  
     |  __rxor__ = __xor__(self, other)
     |  
     |  __sub__(self, other)
     |  
     |  __xor__(self, other)
     |  
     |  isdisjoint(self, other)
     |      Return True if two sets have a null intersection.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Set:
     |  
     |  __hash__ = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Sized:
     |  
     |  __len__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from Sized:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Sized:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Sized:
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Iterable:
     |  
     |  __iter__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Container:
     |  
     |  __contains__(self, x)
    
    class OrderedDict(__builtin__.dict)
     |  Dictionary that remembers insertion order
     |  
     |  Method resolution order:
     |      OrderedDict
     |      __builtin__.dict
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __delitem__(self, key, dict_delitem=<slot wrapper '__delitem__' of 'dict' objects>)
     |      od.__delitem__(y) <==> del od[y]
     |  
     |  __eq__(self, other)
     |      od.__eq__(y) <==> od==y.  Comparison to another OD is order-sensitive
     |      while comparison to a regular mapping is order-insensitive.
     |  
     |  __init__(*args, **kwds)
     |      Initialize an ordered dictionary.  The signature is the same as
     |      regular dictionaries, but keyword arguments are not recommended because
     |      their insertion order is arbitrary.
     |  
     |  __iter__(self)
     |      od.__iter__() <==> iter(od)
     |  
     |  __ne__(self, other)
     |      od.__ne__(y) <==> od!=y
     |  
     |  __reduce__(self)
     |      Return state information for pickling
     |  
     |  __repr__(self, _repr_running={})
     |      od.__repr__() <==> repr(od)
     |  
     |  __reversed__(self)
     |      od.__reversed__() <==> reversed(od)
     |  
     |  __setitem__(self, key, value, dict_setitem=<slot wrapper '__setitem__' of 'dict' objects>)
     |      od.__setitem__(i, y) <==> od[i]=y
     |  
     |  clear(self)
     |      od.clear() -> None.  Remove all items from od.
     |  
     |  copy(self)
     |      od.copy() -> a shallow copy of od
     |  
     |  items(self)
     |      od.items() -> list of (key, value) pairs in od
     |  
     |  iteritems(self)
     |      od.iteritems -> an iterator over the (key, value) pairs in od
     |  
     |  iterkeys(self)
     |      od.iterkeys() -> an iterator over the keys in od
     |  
     |  itervalues(self)
     |      od.itervalues -> an iterator over the values in od
     |  
     |  keys(self)
     |      od.keys() -> list of keys in od
     |  
     |  pop(self, key, default=<object object>)
     |      od.pop(k[,d]) -> v, remove specified key and return the corresponding
     |      value.  If key is not found, d is returned if given, otherwise KeyError
     |      is raised.
     |  
     |  popitem(self, last=True)
     |      od.popitem() -> (k, v), return and remove a (key, value) pair.
     |      Pairs are returned in LIFO order if last is true or FIFO order if false.
     |  
     |  setdefault(self, key, default=None)
     |      od.setdefault(k[,d]) -> od.get(k,d), also set od[k]=d if k not in od
     |  
     |  update(*args, **kwds)
     |      D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
     |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
     |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
     |      In either case, this is followed by: for k, v in F.items(): D[k] = v
     |  
     |  values(self)
     |      od.values() -> list of values in od
     |  
     |  viewitems(self)
     |      od.viewitems() -> a set-like object providing a view on od's items
     |  
     |  viewkeys(self)
     |      od.viewkeys() -> a set-like object providing a view on od's keys
     |  
     |  viewvalues(self)
     |      od.viewvalues() -> an object providing a view on od's values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  fromkeys(cls, iterable, value=None) from __builtin__.type
     |      OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S.
     |      If not specified, the value defaults to None.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from __builtin__.dict:
     |  
     |  __cmp__(...)
     |      x.__cmp__(y) <==> cmp(x,y)
     |  
     |  __contains__(...)
     |      D.__contains__(k) -> True if D has a key k, else False
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __sizeof__(...)
     |      D.__sizeof__() -> size of D in memory, in bytes
     |  
     |  get(...)
     |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
     |  
     |  has_key(...)
     |      D.has_key(k) -> True if D has a key k, else False
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from __builtin__.dict:
     |  
     |  __hash__ = None
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Sequence(Sized, Iterable, Container)
     |  All the operations on a read-only sequence.
     |  
     |  Concrete subclasses must override __new__ or __init__,
     |  __getitem__, and __len__.
     |  
     |  Method resolution order:
     |      Sequence
     |      Sized
     |      Iterable
     |      Container
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, value)
     |  
     |  __getitem__(self, index)
     |  
     |  __iter__(self)
     |  
     |  __reversed__(self)
     |  
     |  count(self, value)
     |      S.count(value) -> integer -- return number of occurrences of value
     |  
     |  index(self, value)
     |      S.index(value) -> integer -- return first index of value.
     |      Raises ValueError if the value is not present.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset(['__getitem__', '__len__'])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Sized:
     |  
     |  __len__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from Sized:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Sized:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Sized:
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class Set(Sized, Iterable, Container)
     |  A set is a finite, iterable container.
     |  
     |  This class provides concrete generic implementations of all
     |  methods except for __contains__, __iter__ and __len__.
     |  
     |  To override the comparisons (presumably for speed, as the
     |  semantics are fixed), redefine __le__ and __ge__,
     |  then the other operations will automatically follow suit.
     |  
     |  Method resolution order:
     |      Set
     |      Sized
     |      Iterable
     |      Container
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __and__(self, other)
     |  
     |  __eq__(self, other)
     |  
     |  __ge__(self, other)
     |  
     |  __gt__(self, other)
     |  
     |  __le__(self, other)
     |  
     |  __lt__(self, other)
     |  
     |  __ne__(self, other)
     |  
     |  __or__(self, other)
     |  
     |  __rand__ = __and__(self, other)
     |  
     |  __ror__ = __or__(self, other)
     |  
     |  __rsub__(self, other)
     |  
     |  __rxor__ = __xor__(self, other)
     |  
     |  __sub__(self, other)
     |  
     |  __xor__(self, other)
     |  
     |  isdisjoint(self, other)
     |      Return True if two sets have a null intersection.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset(['__contains__', '__iter__', '__len__'...
     |  
     |  __hash__ = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Sized:
     |  
     |  __len__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from Sized:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Sized:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Sized:
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Iterable:
     |  
     |  __iter__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Container:
     |  
     |  __contains__(self, x)
    
    class Sized(__builtin__.object)
     |  Methods defined here:
     |  
     |  __len__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset(['__len__'])
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class ValuesView(MappingView)
     |  Method resolution order:
     |      ValuesView
     |      MappingView
     |      Sized
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, value)
     |  
     |  __iter__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset([])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MappingView:
     |  
     |  __init__(self, mapping)
     |  
     |  __len__(self)
     |  
     |  __repr__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from Sized:
     |  
     |  __subclasshook__(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Sized:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Sized:
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class defaultdict(__builtin__.dict)
     |  defaultdict(default_factory[, ...]) --> dict with default factory
     |  
     |  The default factory is called without arguments to produce
     |  a new value when a key is not present, in __getitem__ only.
     |  A defaultdict compares equal to a dict with the same items.
     |  All remaining arguments are treated the same as if they were
     |  passed to the dict constructor, including keyword arguments.
     |  
     |  Method resolution order:
     |      defaultdict
     |      __builtin__.dict
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __copy__(...)
     |      D.copy() -> a shallow copy of D.
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __missing__(...)
     |      __missing__(key) # Called by __getitem__ for missing key; pseudo-code:
     |      if self.default_factory is None: raise KeyError((key,))
     |      self[key] = value = self.default_factory()
     |      return value
     |  
     |  __reduce__(...)
     |      Return state information for pickling.
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  copy(...)
     |      D.copy() -> a shallow copy of D.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  default_factory
     |      Factory for default value called by __missing__().
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from __builtin__.dict:
     |  
     |  __cmp__(...)
     |      x.__cmp__(y) <==> cmp(x,y)
     |  
     |  __contains__(...)
     |      D.__contains__(k) -> True if D has a key k, else False
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __sizeof__(...)
     |      D.__sizeof__() -> size of D in memory, in bytes
     |  
     |  clear(...)
     |      D.clear() -> None.  Remove all items from D.
     |  
     |  fromkeys(...)
     |      dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.
     |      v defaults to None.
     |  
     |  get(...)
     |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
     |  
     |  has_key(...)
     |      D.has_key(k) -> True if D has a key k, else False
     |  
     |  items(...)
     |      D.items() -> list of D's (key, value) pairs, as 2-tuples
     |  
     |  iteritems(...)
     |      D.iteritems() -> an iterator over the (key, value) items of D
     |  
     |  iterkeys(...)
     |      D.iterkeys() -> an iterator over the keys of D
     |  
     |  itervalues(...)
     |      D.itervalues() -> an iterator over the values of D
     |  
     |  keys(...)
     |      D.keys() -> list of D's keys
     |  
     |  pop(...)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |      If key is not found, d is returned if given, otherwise KeyError is raised
     |  
     |  popitem(...)
     |      D.popitem() -> (k, v), remove and return some (key, value) pair as a
     |      2-tuple; but raise KeyError if D is empty.
     |  
     |  setdefault(...)
     |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
     |  
     |  update(...)
     |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
     |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
     |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
     |      In either case, this is followed by: for k in F: D[k] = F[k]
     |  
     |  values(...)
     |      D.values() -> list of D's values
     |  
     |  viewitems(...)
     |      D.viewitems() -> a set-like object providing a view on D's items
     |  
     |  viewkeys(...)
     |      D.viewkeys() -> a set-like object providing a view on D's keys
     |  
     |  viewvalues(...)
     |      D.viewvalues() -> an object providing a view on D's values
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from __builtin__.dict:
     |  
     |  __hash__ = None
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class deque(__builtin__.object)
     |  deque([iterable[, maxlen]]) --> deque object
     |  
     |  Build an ordered collection with optimized access from its endpoints.
     |  
     |  Methods defined here:
     |  
     |  __copy__(...)
     |      Return a shallow copy of a deque.
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __reduce__(...)
     |      Return state information for pickling.
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __reversed__(...)
     |      D.__reversed__() -- return a reverse iterator over the deque
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __sizeof__(...)
     |      D.__sizeof__() -- size of D in memory, in bytes
     |  
     |  append(...)
     |      Add an element to the right side of the deque.
     |  
     |  appendleft(...)
     |      Add an element to the left side of the deque.
     |  
     |  clear(...)
     |      Remove all elements from the deque.
     |  
     |  count(...)
     |      D.count(value) -> integer -- return number of occurrences of value
     |  
     |  extend(...)
     |      Extend the right side of the deque with elements from the iterable
     |  
     |  extendleft(...)
     |      Extend the left side of the deque with elements from the iterable
     |  
     |  pop(...)
     |      Remove and return the rightmost element.
     |  
     |  popleft(...)
     |      Remove and return the leftmost element.
     |  
     |  remove(...)
     |      D.remove(value) -- remove first occurrence of value.
     |  
     |  reverse(...)
     |      D.reverse() -- reverse *IN PLACE*
     |  
     |  rotate(...)
     |      Rotate the deque n steps to the right (default n=1).  If n is negative, rotates left.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  maxlen
     |      maximum size of a deque or None if unbounded
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __hash__ = None
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T

FUNCTIONS
    namedtuple(typename, field_names, verbose=False, rename=False)
        Returns a new subclass of tuple with named fields.
        
        >>> Point = namedtuple('Point', ['x', 'y'])
        >>> Point.__doc__                   # docstring for the new class
        'Point(x, y)'
        >>> p = Point(11, y=22)             # instantiate with positional args or keywords
        >>> p[0] + p[1]                     # indexable like a plain tuple
        33
        >>> x, y = p                        # unpack like a regular tuple
        >>> x, y
        (11, 22)
        >>> p.x + p.y                       # fields also accessible by name
        33
        >>> d = p._asdict()                 # convert to a dictionary
        >>> d['x']
        11
        >>> Point(**d)                      # convert from a dictionary
        Point(x=11, y=22)
        >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
        Point(x=100, y=22)

[operator]
DESCRIPTION
    This module exports a set of functions implemented in C corresponding
    to the intrinsic operators of Python.  For example, operator.add(x, y)
    is equivalent to the expression x+y.  The function names are those
    used for special methods; variants without leading and trailing
    '__' are also provided for convenience.

CLASSES
    __builtin__.object
        attrgetter
        itemgetter
        methodcaller
    
    class attrgetter(__builtin__.object)
     |  attrgetter(attr, ...) --> attrgetter object
     |  
     |  Return a callable object that fetches the given attribute(s) from its operand.
     |  After f = attrgetter('name'), the call f(r) returns r.name.
     |  After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
     |  After h = attrgetter('name.first', 'name.last'), the call h(r) returns
     |  (r.name.first, r.name.last).
     |  
     |  Methods defined here:
     |  
     |  __call__(...)
     |      x.__call__(...) <==> x(...)
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class itemgetter(__builtin__.object)
     |  itemgetter(item, ...) --> itemgetter object
     |  
     |  Return a callable object that fetches the given item(s) from its operand.
     |  After f = itemgetter(2), the call f(r) returns r[2].
     |  After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
     |  
     |  Methods defined here:
     |  
     |  __call__(...)
     |      x.__call__(...) <==> x(...)
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class methodcaller(__builtin__.object)
     |  methodcaller(name, ...) --> methodcaller object
     |  
     |  Return a callable object that calls the given method on its operand.
     |  After f = methodcaller('name'), the call f(r) returns r.name().
     |  After g = methodcaller('name', 'date', foo=1), the call g(r) returns
     |  r.name('date', foo=1).
     |  
     |  Methods defined here:
     |  
     |  __call__(...)
     |      x.__call__(...) <==> x(...)
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T

FUNCTIONS
    __abs__(...)
        abs(a) -- Same as abs(a).
    
    __add__(...)
        add(a, b) -- Same as a + b.
    
    __and__(...)
        and_(a, b) -- Same as a & b.
    
    __concat__(...)
        concat(a, b) -- Same as a + b, for a and b sequences.
    
    __contains__(...)
        contains(a, b) -- Same as b in a (note reversed operands).
    
    __delitem__(...)
        delitem(a, b) -- Same as del a[b].
    
    __delslice__(...)
        delslice(a, b, c) -- Same as del a[b:c].
    
    __div__(...)
        div(a, b) -- Same as a / b when __future__.division is not in effect.
    
    __eq__(...)
        eq(a, b) -- Same as a==b.
    
    __floordiv__(...)
        floordiv(a, b) -- Same as a // b.
    
    __ge__(...)
        ge(a, b) -- Same as a>=b.
    
    __getitem__(...)
        getitem(a, b) -- Same as a[b].
    
    __getslice__(...)
        getslice(a, b, c) -- Same as a[b:c].
    
    __gt__(...)
        gt(a, b) -- Same as a>b.
    
    __iadd__(...)
        a = iadd(a, b) -- Same as a += b.
    
    __iand__(...)
        a = iand(a, b) -- Same as a &= b.
    
    __iconcat__(...)
        a = iconcat(a, b) -- Same as a += b, for a and b sequences.
    
    __idiv__(...)
        a = idiv(a, b) -- Same as a /= b when __future__.division is not in effect.
    
    __ifloordiv__(...)
        a = ifloordiv(a, b) -- Same as a //= b.
    
    __ilshift__(...)
        a = ilshift(a, b) -- Same as a <<= b.
    
    __imod__(...)
        a = imod(a, b) -- Same as a %= b.
    
    __imul__(...)
        a = imul(a, b) -- Same as a *= b.
    
    __index__(...)
        index(a) -- Same as a.__index__()
    
    __inv__(...)
        inv(a) -- Same as ~a.
    
    __invert__(...)
        invert(a) -- Same as ~a.
    
    __ior__(...)
        a = ior(a, b) -- Same as a |= b.
    
    __ipow__(...)
        a = ipow(a, b) -- Same as a **= b.
    
    __irepeat__(...)
        a = irepeat(a, b) -- Same as a *= b, where a is a sequence, and b is an integer.
    
    __irshift__(...)
        a = irshift(a, b) -- Same as a >>= b.
    
    __isub__(...)
        a = isub(a, b) -- Same as a -= b.
    
    __itruediv__(...)
        a = itruediv(a, b) -- Same as a /= b when __future__.division is in effect.
    
    __ixor__(...)
        a = ixor(a, b) -- Same as a ^= b.
    
    __le__(...)
        le(a, b) -- Same as a<=b.
    
    __lshift__(...)
        lshift(a, b) -- Same as a << b.
    
    __lt__(...)
        lt(a, b) -- Same as a<b.
    
    __mod__(...)
        mod(a, b) -- Same as a % b.
    
    __mul__(...)
        mul(a, b) -- Same as a * b.
    
    __ne__(...)
        ne(a, b) -- Same as a!=b.
    
    __neg__(...)
        neg(a) -- Same as -a.
    
    __not__(...)
        not_(a) -- Same as not a.
    
    __or__(...)
        or_(a, b) -- Same as a | b.
    
    __pos__(...)
        pos(a) -- Same as +a.
    
    __pow__(...)
        pow(a, b) -- Same as a ** b.
    
    __repeat__(...)
        repeat(a, b) -- Return a * b, where a is a sequence, and b is an integer.
    
    __rshift__(...)
        rshift(a, b) -- Same as a >> b.
    
    __setitem__(...)
        setitem(a, b, c) -- Same as a[b] = c.
    
    __setslice__(...)
        setslice(a, b, c, d) -- Same as a[b:c] = d.
    
    __sub__(...)
        sub(a, b) -- Same as a - b.
    
    __truediv__(...)
        truediv(a, b) -- Same as a / b when __future__.division is in effect.
    
    __xor__(...)
        xor(a, b) -- Same as a ^ b.
    
    abs(...)
        abs(a) -- Same as abs(a).
    
    add(...)
        add(a, b) -- Same as a + b.
    
    and_(...)
        and_(a, b) -- Same as a & b.
    
    concat(...)
        concat(a, b) -- Same as a + b, for a and b sequences.
    
    contains(...)
        contains(a, b) -- Same as b in a (note reversed operands).
    
    countOf(...)
        countOf(a, b) -- Return the number of times b occurs in a.
    
    delitem(...)
        delitem(a, b) -- Same as del a[b].
    
    delslice(...)
        delslice(a, b, c) -- Same as del a[b:c].
    
    div(...)
        div(a, b) -- Same as a / b when __future__.division is not in effect.
    
    eq(...)
        eq(a, b) -- Same as a==b.
    
    floordiv(...)
        floordiv(a, b) -- Same as a // b.
    
    ge(...)
        ge(a, b) -- Same as a>=b.
    
    getitem(...)
        getitem(a, b) -- Same as a[b].
    
    getslice(...)
        getslice(a, b, c) -- Same as a[b:c].
    
    gt(...)
        gt(a, b) -- Same as a>b.
    
    iadd(...)
        a = iadd(a, b) -- Same as a += b.
    
    iand(...)
        a = iand(a, b) -- Same as a &= b.
    
    iconcat(...)
        a = iconcat(a, b) -- Same as a += b, for a and b sequences.
    
    idiv(...)
        a = idiv(a, b) -- Same as a /= b when __future__.division is not in effect.
    
    ifloordiv(...)
        a = ifloordiv(a, b) -- Same as a //= b.
    
    ilshift(...)
        a = ilshift(a, b) -- Same as a <<= b.
    
    imod(...)
        a = imod(a, b) -- Same as a %= b.
    
    imul(...)
        a = imul(a, b) -- Same as a *= b.
    
    index(...)
        index(a) -- Same as a.__index__()
    
    indexOf(...)
        indexOf(a, b) -- Return the first index of b in a.
    
    inv(...)
        inv(a) -- Same as ~a.
    
    invert(...)
        invert(a) -- Same as ~a.
    
    ior(...)
        a = ior(a, b) -- Same as a |= b.
    
    ipow(...)
        a = ipow(a, b) -- Same as a **= b.
    
    irepeat(...)
        a = irepeat(a, b) -- Same as a *= b, where a is a sequence, and b is an integer.
    
    irshift(...)
        a = irshift(a, b) -- Same as a >>= b.
    
    isCallable(...)
        isCallable(a) -- Same as callable(a).
    
    isMappingType(...)
        isMappingType(a) -- Return True if a has a mapping type, False otherwise.
    
    isNumberType(...)
        isNumberType(a) -- Return True if a has a numeric type, False otherwise.
    
    isSequenceType(...)
        isSequenceType(a) -- Return True if a has a sequence type, False otherwise.
    
    is_(...)
        is_(a, b) -- Same as a is b.
    
    is_not(...)
        is_not(a, b) -- Same as a is not b.
    
    isub(...)
        a = isub(a, b) -- Same as a -= b.
    
    itruediv(...)
        a = itruediv(a, b) -- Same as a /= b when __future__.division is in effect.
    
    ixor(...)
        a = ixor(a, b) -- Same as a ^= b.
    
    le(...)
        le(a, b) -- Same as a<=b.
    
    lshift(...)
        lshift(a, b) -- Same as a << b.
    
    lt(...)
        lt(a, b) -- Same as a<b.
    
    mod(...)
        mod(a, b) -- Same as a % b.
    
    mul(...)
        mul(a, b) -- Same as a * b.
    
    ne(...)
        ne(a, b) -- Same as a!=b.
    
    neg(...)
        neg(a) -- Same as -a.
    
    not_(...)
        not_(a) -- Same as not a.
    
    or_(...)
        or_(a, b) -- Same as a | b.
    
    pos(...)
        pos(a) -- Same as +a.
    
    pow(...)
        pow(a, b) -- Same as a ** b.
    
    repeat(...)
        repeat(a, b) -- Return a * b, where a is a sequence, and b is an integer.
    
    rshift(...)
        rshift(a, b) -- Same as a >> b.
    
    sequenceIncludes(...)
        sequenceIncludes(a, b) -- Same as b in a (note reversed operands; deprecated).
    
    setitem(...)
        setitem(a, b, c) -- Same as a[b] = c.
    
    setslice(...)
        setslice(a, b, c, d) -- Same as a[b:c] = d.
    
    sub(...)
        sub(a, b) -- Same as a - b.
    
    truediv(...)
        truediv(a, b) -- Same as a / b when __future__.division is in effect.
    
    truth(...)
        truth(a) -- Return True if a is true, False otherwise.
    
    xor(...)
        xor(a, b) -- Same as a ^ b.

[io]
DESCRIPTION
    The io module provides the Python interfaces to stream handling. The
    builtin open function is defined in this module.
    
    At the top of the I/O hierarchy is the abstract base class IOBase. It
    defines the basic interface to a stream. Note, however, that there is no
    separation between reading and writing to streams; implementations are
    allowed to raise an IOError if they do not support a given operation.
    
    Extending IOBase is RawIOBase which deals simply with the reading and
    writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
    an interface to OS files.
    
    BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
    subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
    streams that are readable, writable, and both respectively.
    BufferedRandom provides a buffered interface to random access
    streams. BytesIO is a simple stream of in-memory bytes.
    
    Another IOBase subclass, TextIOBase, deals with the encoding and decoding
    of streams into text. TextIOWrapper, which extends it, is a buffered text
    interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
    is an in-memory stream for text.
    
    Argument names are not part of the specification, and only the arguments
    of open() are intended to be used as keyword arguments.
    
    data:
    
    DEFAULT_BUFFER_SIZE
    
       An int containing the default buffer size used by the module's buffered
       I/O classes. open() uses the file's blksize (as obtained by os.stat) if
       possible.

CLASSES
    _io._BufferedIOBase(_io._IOBase)
        _io.BufferedRWPair
        _io.BufferedRandom
        _io.BufferedReader
        _io.BufferedWriter
        _io.BytesIO
        BufferedIOBase(_io._BufferedIOBase, IOBase)
    _io._IOBase(__builtin__.object)
        IOBase
            BufferedIOBase(_io._BufferedIOBase, IOBase)
            RawIOBase(_io._RawIOBase, IOBase)
            TextIOBase(_io._TextIOBase, IOBase)
    _io._RawIOBase(_io._IOBase)
        _io.FileIO
        RawIOBase(_io._RawIOBase, IOBase)
    _io._TextIOBase(_io._IOBase)
        _io.StringIO
        _io.TextIOWrapper
        TextIOBase(_io._TextIOBase, IOBase)
    exceptions.IOError(exceptions.EnvironmentError)
        __builtin__.BlockingIOError
        UnsupportedOperation(exceptions.ValueError, exceptions.IOError)
    exceptions.ValueError(exceptions.StandardError)
        UnsupportedOperation(exceptions.ValueError, exceptions.IOError)
    
    class BlockingIOError(exceptions.IOError)
     |  Exception raised when I/O would block on a non-blocking I/O stream
     |  
     |  Method resolution order:
     |      BlockingIOError
     |      exceptions.IOError
     |      exceptions.EnvironmentError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  characters_written
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.IOError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.EnvironmentError:
     |  
     |  __reduce__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.EnvironmentError:
     |  
     |  errno
     |      exception errno
     |  
     |  filename
     |      exception filename
     |  
     |  strerror
     |      exception strerror
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class BufferedIOBase(_io._BufferedIOBase, IOBase)
     |  Base class for buffered IO objects.
     |  
     |  The main difference with RawIOBase is that the read() method
     |  supports omitting the size argument, and does not have a default
     |  implementation that defers to readinto().
     |  
     |  In addition, read(), readinto() and write() may raise
     |  BlockingIOError if the underlying raw stream is in non-blocking
     |  mode and not ready; unlike their raw counterparts, they will never
     |  return None.
     |  
     |  A typical implementation should not inherit from a RawIOBase
     |  implementation, but wrap one.
     |  
     |  Method resolution order:
     |      BufferedIOBase
     |      _io._BufferedIOBase
     |      IOBase
     |      _io._IOBase
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset([])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _io._BufferedIOBase:
     |  
     |  detach(...)
     |      Disconnect this buffer from its underlying raw stream and return it.
     |      
     |      After the raw stream has been detached, the buffer is in an unusable
     |      state.
     |  
     |  read(...)
     |      Read and return up to n bytes.
     |      
     |      If the argument is omitted, None, or negative, reads and
     |      returns all data until EOF.
     |      
     |      If the argument is positive, and the underlying raw stream is
     |      not 'interactive', multiple raw reads may be issued to satisfy
     |      the byte count (unless EOF is reached first).  But for
     |      interactive raw streams (as well as sockets and pipes), at most
     |      one raw read will be issued, and a short result does not imply
     |      that EOF is imminent.
     |      
     |      Returns an empty bytes object on EOF.
     |      
     |      Returns None if the underlying raw stream was open in non-blocking
     |      mode and no data is available at the moment.
     |  
     |  read1(...)
     |      Read and return up to n bytes, with at most one read() call
     |      to the underlying raw stream. A short result does not imply
     |      that EOF is imminent.
     |      
     |      Returns an empty bytes object on EOF.
     |  
     |  readinto(...)
     |  
     |  write(...)
     |      Write the given buffer to the IO stream.
     |      
     |      Returns the number of bytes written, which is always len(b).
     |      
     |      Raises BlockingIOError if the buffer is full and the
     |      underlying raw stream cannot accept more data at the moment.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from IOBase:
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _io._IOBase:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  close(...)
     |      Flush and close the IO object.
     |      
     |      This method has no effect if the file is already closed.
     |  
     |  fileno(...)
     |      Returns underlying file descriptor if one exists.
     |      
     |      An IOError is raised if the IO object does not use a file descriptor.
     |  
     |  flush(...)
     |      Flush write buffers, if applicable.
     |      
     |      This is not implemented for read-only and non-blocking streams.
     |  
     |  isatty(...)
     |      Return whether this is an 'interactive' stream.
     |      
     |      Return False if it can't be determined.
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  readable(...)
     |      Return whether object was opened for reading.
     |      
     |      If False, read() will raise IOError.
     |  
     |  readline(...)
     |      Read and return a line from the stream.
     |      
     |      If limit is specified, at most limit bytes will be read.
     |      
     |      The line terminator is always b'\n' for binary files; for text
     |      files, the newlines argument to open can be used to select the line
     |      terminator(s) recognized.
     |  
     |  readlines(...)
     |      Return a list of lines from the stream.
     |      
     |      hint can be specified to control the number of lines read: no more
     |      lines will be read if the total size (in bytes/characters) of all
     |      lines so far exceeds hint.
     |  
     |  seek(...)
     |      Change stream position.
     |      
     |      Change the stream position to the given byte offset. The offset is
     |      interpreted relative to the position indicated by whence.  Values
     |      for whence are:
     |      
     |      * 0 -- start of stream (the default); offset should be zero or positive
     |      * 1 -- current stream position; offset may be negative
     |      * 2 -- end of stream; offset is usually negative
     |      
     |      Return the new absolute position.
     |  
     |  seekable(...)
     |      Return whether object supports random access.
     |      
     |      If False, seek(), tell() and truncate() will raise IOError.
     |      This method may need to do a test seek().
     |  
     |  tell(...)
     |      Return current stream position.
     |  
     |  truncate(...)
     |      Truncate file to size bytes.
     |      
     |      File pointer is left unchanged.  Size defaults to the current IO
     |      position as reported by tell().  Returns the new size.
     |  
     |  writable(...)
     |      Return whether object was opened for writing.
     |      
     |      If False, read() will raise IOError.
     |  
     |  writelines(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _io._IOBase:
     |  
     |  closed
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _io._IOBase:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class BufferedRWPair(_BufferedIOBase)
     |  A buffered reader and writer object together.
     |  
     |  A buffered reader object and buffered writer object put together to
     |  form a sequential IO object that can read and write. This is typically
     |  used with a socket or two-way pipe.
     |  
     |  reader and writer are RawIOBase objects that are readable and
     |  writeable respectively. If the buffer_size is omitted it defaults to
     |  DEFAULT_BUFFER_SIZE.
     |  
     |  Method resolution order:
     |      BufferedRWPair
     |      _BufferedIOBase
     |      _IOBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  close(...)
     |  
     |  flush(...)
     |  
     |  isatty(...)
     |  
     |  peek(...)
     |  
     |  read(...)
     |  
     |  read1(...)
     |  
     |  readable(...)
     |  
     |  readinto(...)
     |  
     |  writable(...)
     |  
     |  write(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  closed
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _BufferedIOBase:
     |  
     |  detach(...)
     |      Disconnect this buffer from its underlying raw stream and return it.
     |      
     |      After the raw stream has been detached, the buffer is in an unusable
     |      state.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _IOBase:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  fileno(...)
     |      Returns underlying file descriptor if one exists.
     |      
     |      An IOError is raised if the IO object does not use a file descriptor.
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  readline(...)
     |      Read and return a line from the stream.
     |      
     |      If limit is specified, at most limit bytes will be read.
     |      
     |      The line terminator is always b'\n' for binary files; for text
     |      files, the newlines argument to open can be used to select the line
     |      terminator(s) recognized.
     |  
     |  readlines(...)
     |      Return a list of lines from the stream.
     |      
     |      hint can be specified to control the number of lines read: no more
     |      lines will be read if the total size (in bytes/characters) of all
     |      lines so far exceeds hint.
     |  
     |  seek(...)
     |      Change stream position.
     |      
     |      Change the stream position to the given byte offset. The offset is
     |      interpreted relative to the position indicated by whence.  Values
     |      for whence are:
     |      
     |      * 0 -- start of stream (the default); offset should be zero or positive
     |      * 1 -- current stream position; offset may be negative
     |      * 2 -- end of stream; offset is usually negative
     |      
     |      Return the new absolute position.
     |  
     |  seekable(...)
     |      Return whether object supports random access.
     |      
     |      If False, seek(), tell() and truncate() will raise IOError.
     |      This method may need to do a test seek().
     |  
     |  tell(...)
     |      Return current stream position.
     |  
     |  truncate(...)
     |      Truncate file to size bytes.
     |      
     |      File pointer is left unchanged.  Size defaults to the current IO
     |      position as reported by tell().  Returns the new size.
     |  
     |  writelines(...)
    
    class BufferedRandom(_BufferedIOBase)
     |  A buffered interface to random access streams.
     |  
     |  The constructor creates a reader and writer for a seekable stream,
     |  raw, given in the first argument. If the buffer_size is omitted it
     |  defaults to DEFAULT_BUFFER_SIZE. max_buffer_size isn't used anymore.
     |  
     |  Method resolution order:
     |      BufferedRandom
     |      _BufferedIOBase
     |      _IOBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __sizeof__(...)
     |  
     |  close(...)
     |  
     |  detach(...)
     |  
     |  fileno(...)
     |  
     |  flush(...)
     |  
     |  isatty(...)
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  peek(...)
     |  
     |  read(...)
     |  
     |  read1(...)
     |  
     |  readable(...)
     |  
     |  readinto(...)
     |  
     |  readline(...)
     |  
     |  seek(...)
     |  
     |  seekable(...)
     |  
     |  tell(...)
     |  
     |  truncate(...)
     |  
     |  writable(...)
     |  
     |  write(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  closed
     |  
     |  mode
     |  
     |  name
     |  
     |  raw
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _IOBase:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  readlines(...)
     |      Return a list of lines from the stream.
     |      
     |      hint can be specified to control the number of lines read: no more
     |      lines will be read if the total size (in bytes/characters) of all
     |      lines so far exceeds hint.
     |  
     |  writelines(...)
    
    class BufferedReader(_BufferedIOBase)
     |  Create a new buffered reader using the given readable raw IO object.
     |  
     |  Method resolution order:
     |      BufferedReader
     |      _BufferedIOBase
     |      _IOBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __sizeof__(...)
     |  
     |  close(...)
     |  
     |  detach(...)
     |  
     |  fileno(...)
     |  
     |  flush(...)
     |  
     |  isatty(...)
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  peek(...)
     |  
     |  read(...)
     |  
     |  read1(...)
     |  
     |  readable(...)
     |  
     |  readline(...)
     |  
     |  seek(...)
     |  
     |  seekable(...)
     |  
     |  tell(...)
     |  
     |  truncate(...)
     |  
     |  writable(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  closed
     |  
     |  mode
     |  
     |  name
     |  
     |  raw
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _BufferedIOBase:
     |  
     |  readinto(...)
     |  
     |  write(...)
     |      Write the given buffer to the IO stream.
     |      
     |      Returns the number of bytes written, which is always len(b).
     |      
     |      Raises BlockingIOError if the buffer is full and the
     |      underlying raw stream cannot accept more data at the moment.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _IOBase:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  readlines(...)
     |      Return a list of lines from the stream.
     |      
     |      hint can be specified to control the number of lines read: no more
     |      lines will be read if the total size (in bytes/characters) of all
     |      lines so far exceeds hint.
     |  
     |  writelines(...)
    
    class BufferedWriter(_BufferedIOBase)
     |  A buffer for a writeable sequential RawIO object.
     |  
     |  The constructor creates a BufferedWriter for the given writeable raw
     |  stream. If the buffer_size is not given, it defaults to
     |  DEFAULT_BUFFER_SIZE. max_buffer_size isn't used anymore.
     |  
     |  Method resolution order:
     |      BufferedWriter
     |      _BufferedIOBase
     |      _IOBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __sizeof__(...)
     |  
     |  close(...)
     |  
     |  detach(...)
     |  
     |  fileno(...)
     |  
     |  flush(...)
     |  
     |  isatty(...)
     |  
     |  readable(...)
     |  
     |  seek(...)
     |  
     |  seekable(...)
     |  
     |  tell(...)
     |  
     |  truncate(...)
     |  
     |  writable(...)
     |  
     |  write(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  closed
     |  
     |  mode
     |  
     |  name
     |  
     |  raw
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _BufferedIOBase:
     |  
     |  read(...)
     |      Read and return up to n bytes.
     |      
     |      If the argument is omitted, None, or negative, reads and
     |      returns all data until EOF.
     |      
     |      If the argument is positive, and the underlying raw stream is
     |      not 'interactive', multiple raw reads may be issued to satisfy
     |      the byte count (unless EOF is reached first).  But for
     |      interactive raw streams (as well as sockets and pipes), at most
     |      one raw read will be issued, and a short result does not imply
     |      that EOF is imminent.
     |      
     |      Returns an empty bytes object on EOF.
     |      
     |      Returns None if the underlying raw stream was open in non-blocking
     |      mode and no data is available at the moment.
     |  
     |  read1(...)
     |      Read and return up to n bytes, with at most one read() call
     |      to the underlying raw stream. A short result does not imply
     |      that EOF is imminent.
     |      
     |      Returns an empty bytes object on EOF.
     |  
     |  readinto(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _IOBase:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  readline(...)
     |      Read and return a line from the stream.
     |      
     |      If limit is specified, at most limit bytes will be read.
     |      
     |      The line terminator is always b'\n' for binary files; for text
     |      files, the newlines argument to open can be used to select the line
     |      terminator(s) recognized.
     |  
     |  readlines(...)
     |      Return a list of lines from the stream.
     |      
     |      hint can be specified to control the number of lines read: no more
     |      lines will be read if the total size (in bytes/characters) of all
     |      lines so far exceeds hint.
     |  
     |  writelines(...)
    
    class BytesIO(_BufferedIOBase)
     |  BytesIO([buffer]) -> object
     |  
     |  Create a buffered I/O implementation using an in-memory bytes
     |  buffer, ready for reading and writing.
     |  
     |  Method resolution order:
     |      BytesIO
     |      _BufferedIOBase
     |      _IOBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __getstate__(...)
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  __setstate__(...)
     |  
     |  __sizeof__(...)
     |  
     |  close(...)
     |      close() -> None.  Disable all I/O operations.
     |  
     |  flush(...)
     |      flush() -> None.  Does nothing.
     |  
     |  getvalue(...)
     |      getvalue() -> bytes.
     |      
     |      Retrieve the entire contents of the BytesIO object.
     |  
     |  isatty(...)
     |      isatty() -> False.
     |      
     |      Always returns False since BytesIO objects are not connected
     |      to a tty-like device.
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  read(...)
     |      read([size]) -> read at most size bytes, returned as a string.
     |      
     |      If the size argument is negative, read until EOF is reached.
     |      Return an empty string at EOF.
     |  
     |  read1(...)
     |      read1(size) -> read at most size bytes, returned as a string.
     |      
     |      If the size argument is negative or omitted, read until EOF is reached.
     |      Return an empty string at EOF.
     |  
     |  readable(...)
     |      readable() -> bool. Returns True if the IO object can be read.
     |  
     |  readinto(...)
     |      readinto(b) -> int.  Read up to len(b) bytes into b.
     |      
     |      Returns number of bytes read (0 for EOF), or None if the object
     |      is set not to block and has no data to read.
     |  
     |  readline(...)
     |      readline([size]) -> next line from the file, as a string.
     |      
     |      Retain newline.  A non-negative size argument limits the maximum
     |      number of bytes to return (an incomplete line may be returned then).
     |      Return an empty string at EOF.
     |  
     |  readlines(...)
     |      readlines([size]) -> list of strings, each a line from the file.
     |      
     |      Call readline() repeatedly and return a list of the lines so read.
     |      The optional size argument, if given, is an approximate bound on the
     |      total number of bytes in the lines returned.
     |  
     |  seek(...)
     |      seek(pos[, whence]) -> int.  Change stream position.
     |      
     |      Seek to byte offset pos relative to position indicated by whence:
     |           0  Start of stream (the default).  pos should be >= 0;
     |           1  Current position - pos may be negative;
     |           2  End of stream - pos usually negative.
     |      Returns the new absolute position.
     |  
     |  seekable(...)
     |      seekable() -> bool. Returns True if the IO object can be seeked.
     |  
     |  tell(...)
     |      tell() -> current file position, an integer
     |  
     |  truncate(...)
     |      truncate([size]) -> int.  Truncate the file to at most size bytes.
     |      
     |      Size defaults to the current file position, as returned by tell().
     |      The current file position is unchanged.  Returns the new size.
     |  
     |  writable(...)
     |      writable() -> bool. Returns True if the IO object can be written.
     |  
     |  write(...)
     |      write(bytes) -> int.  Write bytes to file.
     |      
     |      Return the number of bytes written.
     |  
     |  writelines(...)
     |      writelines(sequence_of_strings) -> None.  Write strings to the file.
     |      
     |      Note that newlines are not added.  The sequence can be any iterable
     |      object producing strings. This is equivalent to calling write() for
     |      each string.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  closed
     |      True if the file is closed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _BufferedIOBase:
     |  
     |  detach(...)
     |      Disconnect this buffer from its underlying raw stream and return it.
     |      
     |      After the raw stream has been detached, the buffer is in an unusable
     |      state.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _IOBase:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  fileno(...)
     |      Returns underlying file descriptor if one exists.
     |      
     |      An IOError is raised if the IO object does not use a file descriptor.
    
    class FileIO(_RawIOBase)
     |  file(name: str[, mode: str]) -> file IO object
     |  
     |  Open a file.  The mode can be 'r' (default), 'w' or 'a' for reading,
     |  writing or appending.  The file will be created if it doesn't exist
     |  when opened for writing or appending; it will be truncated when
     |  opened for writing.  Add a '+' to the mode to allow simultaneous
     |  reading and writing.
     |  
     |  Method resolution order:
     |      FileIO
     |      _RawIOBase
     |      _IOBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  close(...)
     |      close() -> None.  Close the file.
     |      
     |      A closed file cannot be used for further I/O operations.  close() may be
     |      called more than once without error.
     |  
     |  fileno(...)
     |      fileno() -> int.  Return the underlying file descriptor (an integer).
     |  
     |  isatty(...)
     |      isatty() -> bool.  True if the file is connected to a TTY device.
     |  
     |  read(...)
     |      read(size: int) -> bytes.  read at most size bytes, returned as bytes.
     |      
     |      Only makes one system call, so less data may be returned than requested
     |      In non-blocking mode, returns None if no data is available.
     |      On end-of-file, returns ''.
     |  
     |  readable(...)
     |      readable() -> bool.  True if file was opened in a read mode.
     |  
     |  readall(...)
     |      readall() -> bytes.  read all data from the file, returned as bytes.
     |      
     |      In non-blocking mode, returns as much as is immediately available,
     |      or None if no data is available.  On end-of-file, returns ''.
     |  
     |  readinto(...)
     |      readinto() -> Same as RawIOBase.readinto().
     |  
     |  seek(...)
     |      seek(offset: int[, whence: int]) -> int.  Move to new file position
     |      and return the file position.
     |      
     |      Argument offset is a byte count.  Optional argument whence defaults to
     |      SEEK_SET or 0 (offset from start of file, offset should be >= 0); other values
     |      are SEEK_CUR or 1 (move relative to current position, positive or negative),
     |      and SEEK_END or 2 (move relative to end of file, usually negative, although
     |      many platforms allow seeking beyond the end of a file).
     |      
     |      Note that not all file objects are seekable.
     |  
     |  seekable(...)
     |      seekable() -> bool.  True if file supports random-access.
     |  
     |  tell(...)
     |      tell() -> int.  Current file position.
     |      
     |      Can raise OSError for non seekable files.
     |  
     |  truncate(...)
     |      truncate([size: int]) -> int.  Truncate the file to at most size bytes and
     |      return the truncated size.
     |      
     |      Size defaults to the current file position, as returned by tell().
     |      The current file position is changed to the value of size.
     |  
     |  writable(...)
     |      writable() -> bool.  True if file was opened in a write mode.
     |  
     |  write(...)
     |      write(b) -> int.  Write array of bytes b, return number written.
     |      
     |      Only makes one system call, so not all of the data may be written.
     |      The number of bytes actually written is returned.  In non-blocking mode,
     |      returns None if the write would block.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  closed
     |      True if the file is closed
     |  
     |  closefd
     |      True if the file descriptor will be closed by close().
     |  
     |  mode
     |      String giving the file mode
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _IOBase:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  flush(...)
     |      Flush write buffers, if applicable.
     |      
     |      This is not implemented for read-only and non-blocking streams.
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  readline(...)
     |      Read and return a line from the stream.
     |      
     |      If limit is specified, at most limit bytes will be read.
     |      
     |      The line terminator is always b'\n' for binary files; for text
     |      files, the newlines argument to open can be used to select the line
     |      terminator(s) recognized.
     |  
     |  readlines(...)
     |      Return a list of lines from the stream.
     |      
     |      hint can be specified to control the number of lines read: no more
     |      lines will be read if the total size (in bytes/characters) of all
     |      lines so far exceeds hint.
     |  
     |  writelines(...)
    
    class IOBase(_io._IOBase)
     |  The abstract base class for all I/O classes, acting on streams of
     |  bytes. There is no public constructor.
     |  
     |  This class provides dummy implementations for many methods that
     |  derived classes can override selectively; the default implementations
     |  represent a file that cannot be read, written or seeked.
     |  
     |  Even though IOBase does not declare read, readinto, or write because
     |  their signatures will vary, implementations and clients should
     |  consider those methods part of the interface. Also, implementations
     |  may raise an IOError when operations they do not support are called.
     |  
     |  The basic type used for binary data read from or written to a file is
     |  the bytes type. Method arguments may also be bytearray or memoryview
     |  of arrays of bytes. In some cases, such as readinto, a writable
     |  object such as bytearray is required. Text I/O classes work with
     |  unicode data.
     |  
     |  Note that calling any method (except additional calls to close(),
     |  which are ignored) on a closed stream should raise a ValueError.
     |  
     |  IOBase (and its subclasses) support the iterator protocol, meaning
     |  that an IOBase object can be iterated over yielding the lines in a
     |  stream.
     |  
     |  IOBase also supports the :keyword:`with` statement. In this example,
     |  fp is closed after the suite of the with statement is complete:
     |  
     |  with open('spam.txt', 'r') as fp:
     |      fp.write('Spam and eggs!')
     |  
     |  Method resolution order:
     |      IOBase
     |      _io._IOBase
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset([])
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _io._IOBase:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  close(...)
     |      Flush and close the IO object.
     |      
     |      This method has no effect if the file is already closed.
     |  
     |  fileno(...)
     |      Returns underlying file descriptor if one exists.
     |      
     |      An IOError is raised if the IO object does not use a file descriptor.
     |  
     |  flush(...)
     |      Flush write buffers, if applicable.
     |      
     |      This is not implemented for read-only and non-blocking streams.
     |  
     |  isatty(...)
     |      Return whether this is an 'interactive' stream.
     |      
     |      Return False if it can't be determined.
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  readable(...)
     |      Return whether object was opened for reading.
     |      
     |      If False, read() will raise IOError.
     |  
     |  readline(...)
     |      Read and return a line from the stream.
     |      
     |      If limit is specified, at most limit bytes will be read.
     |      
     |      The line terminator is always b'\n' for binary files; for text
     |      files, the newlines argument to open can be used to select the line
     |      terminator(s) recognized.
     |  
     |  readlines(...)
     |      Return a list of lines from the stream.
     |      
     |      hint can be specified to control the number of lines read: no more
     |      lines will be read if the total size (in bytes/characters) of all
     |      lines so far exceeds hint.
     |  
     |  seek(...)
     |      Change stream position.
     |      
     |      Change the stream position to the given byte offset. The offset is
     |      interpreted relative to the position indicated by whence.  Values
     |      for whence are:
     |      
     |      * 0 -- start of stream (the default); offset should be zero or positive
     |      * 1 -- current stream position; offset may be negative
     |      * 2 -- end of stream; offset is usually negative
     |      
     |      Return the new absolute position.
     |  
     |  seekable(...)
     |      Return whether object supports random access.
     |      
     |      If False, seek(), tell() and truncate() will raise IOError.
     |      This method may need to do a test seek().
     |  
     |  tell(...)
     |      Return current stream position.
     |  
     |  truncate(...)
     |      Truncate file to size bytes.
     |      
     |      File pointer is left unchanged.  Size defaults to the current IO
     |      position as reported by tell().  Returns the new size.
     |  
     |  writable(...)
     |      Return whether object was opened for writing.
     |      
     |      If False, read() will raise IOError.
     |  
     |  writelines(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _io._IOBase:
     |  
     |  closed
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _io._IOBase:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class RawIOBase(_io._RawIOBase, IOBase)
     |  Base class for raw binary I/O.
     |  
     |  Method resolution order:
     |      RawIOBase
     |      _io._RawIOBase
     |      IOBase
     |      _io._IOBase
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset([])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _io._RawIOBase:
     |  
     |  read(...)
     |  
     |  readall(...)
     |      Read until EOF, using multiple read() call.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from IOBase:
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _io._IOBase:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  close(...)
     |      Flush and close the IO object.
     |      
     |      This method has no effect if the file is already closed.
     |  
     |  fileno(...)
     |      Returns underlying file descriptor if one exists.
     |      
     |      An IOError is raised if the IO object does not use a file descriptor.
     |  
     |  flush(...)
     |      Flush write buffers, if applicable.
     |      
     |      This is not implemented for read-only and non-blocking streams.
     |  
     |  isatty(...)
     |      Return whether this is an 'interactive' stream.
     |      
     |      Return False if it can't be determined.
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  readable(...)
     |      Return whether object was opened for reading.
     |      
     |      If False, read() will raise IOError.
     |  
     |  readline(...)
     |      Read and return a line from the stream.
     |      
     |      If limit is specified, at most limit bytes will be read.
     |      
     |      The line terminator is always b'\n' for binary files; for text
     |      files, the newlines argument to open can be used to select the line
     |      terminator(s) recognized.
     |  
     |  readlines(...)
     |      Return a list of lines from the stream.
     |      
     |      hint can be specified to control the number of lines read: no more
     |      lines will be read if the total size (in bytes/characters) of all
     |      lines so far exceeds hint.
     |  
     |  seek(...)
     |      Change stream position.
     |      
     |      Change the stream position to the given byte offset. The offset is
     |      interpreted relative to the position indicated by whence.  Values
     |      for whence are:
     |      
     |      * 0 -- start of stream (the default); offset should be zero or positive
     |      * 1 -- current stream position; offset may be negative
     |      * 2 -- end of stream; offset is usually negative
     |      
     |      Return the new absolute position.
     |  
     |  seekable(...)
     |      Return whether object supports random access.
     |      
     |      If False, seek(), tell() and truncate() will raise IOError.
     |      This method may need to do a test seek().
     |  
     |  tell(...)
     |      Return current stream position.
     |  
     |  truncate(...)
     |      Truncate file to size bytes.
     |      
     |      File pointer is left unchanged.  Size defaults to the current IO
     |      position as reported by tell().  Returns the new size.
     |  
     |  writable(...)
     |      Return whether object was opened for writing.
     |      
     |      If False, read() will raise IOError.
     |  
     |  writelines(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _io._IOBase:
     |  
     |  closed
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _io._IOBase:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class StringIO(_TextIOBase)
     |  Text I/O implementation using an in-memory buffer.
     |  
     |  The initial_value argument sets the value of object.  The newline
     |  argument is like the one of TextIOWrapper's constructor.
     |  
     |  Method resolution order:
     |      StringIO
     |      _TextIOBase
     |      _IOBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __getstate__(...)
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __setstate__(...)
     |  
     |  close(...)
     |      Close the IO object. Attempting any further operation after the
     |      object is closed will raise a ValueError.
     |      
     |      This method has no effect if the file is already closed.
     |  
     |  getvalue(...)
     |      Retrieve the entire contents of the object.
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  read(...)
     |      Read at most n characters, returned as a string.
     |      
     |      If the argument is negative or omitted, read until EOF
     |      is reached. Return an empty string at EOF.
     |  
     |  readable(...)
     |      readable() -> bool. Returns True if the IO object can be read.
     |  
     |  readline(...)
     |      Read until newline or EOF.
     |      
     |      Returns an empty string if EOF is hit immediately.
     |  
     |  seek(...)
     |      Change stream position.
     |      
     |      Seek to character offset pos relative to position indicated by whence:
     |          0  Start of stream (the default).  pos should be >= 0;
     |          1  Current position - pos must be 0;
     |          2  End of stream - pos must be 0.
     |      Returns the new absolute position.
     |  
     |  seekable(...)
     |      seekable() -> bool. Returns True if the IO object can be seeked.
     |  
     |  tell(...)
     |      Tell the current file position.
     |  
     |  truncate(...)
     |      Truncate size to pos.
     |      
     |      The pos argument defaults to the current file position, as
     |      returned by tell().  The current file position is unchanged.
     |      Returns the new absolute position.
     |  
     |  writable(...)
     |      writable() -> bool. Returns True if the IO object can be written.
     |  
     |  write(...)
     |      Write string to file.
     |      
     |      Returns the number of characters written, which is always equal to
     |      the length of the string.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  closed
     |  
     |  line_buffering
     |  
     |  newlines
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _TextIOBase:
     |  
     |  detach(...)
     |      Separate the underlying buffer from the TextIOBase and return it.
     |      
     |      After the underlying buffer has been detached, the TextIO is in an
     |      unusable state.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _TextIOBase:
     |  
     |  encoding
     |      Encoding of the text stream.
     |      
     |      Subclasses should override.
     |  
     |  errors
     |      The error setting of the decoder or encoder.
     |      
     |      Subclasses should override.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _IOBase:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  fileno(...)
     |      Returns underlying file descriptor if one exists.
     |      
     |      An IOError is raised if the IO object does not use a file descriptor.
     |  
     |  flush(...)
     |      Flush write buffers, if applicable.
     |      
     |      This is not implemented for read-only and non-blocking streams.
     |  
     |  isatty(...)
     |      Return whether this is an 'interactive' stream.
     |      
     |      Return False if it can't be determined.
     |  
     |  readlines(...)
     |      Return a list of lines from the stream.
     |      
     |      hint can be specified to control the number of lines read: no more
     |      lines will be read if the total size (in bytes/characters) of all
     |      lines so far exceeds hint.
     |  
     |  writelines(...)
    
    class TextIOBase(_io._TextIOBase, IOBase)
     |  Base class for text I/O.
     |  
     |  This class provides a character and line based interface to stream
     |  I/O. There is no readinto method because Python's character strings
     |  are immutable. There is no public constructor.
     |  
     |  Method resolution order:
     |      TextIOBase
     |      _io._TextIOBase
     |      IOBase
     |      _io._IOBase
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset([])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _io._TextIOBase:
     |  
     |  detach(...)
     |      Separate the underlying buffer from the TextIOBase and return it.
     |      
     |      After the underlying buffer has been detached, the TextIO is in an
     |      unusable state.
     |  
     |  read(...)
     |      Read at most n characters from stream.
     |      
     |      Read from underlying buffer until we have n characters or we hit EOF.
     |      If n is negative or omitted, read until EOF.
     |  
     |  readline(...)
     |      Read until newline or EOF.
     |      
     |      Returns an empty string if EOF is hit immediately.
     |  
     |  write(...)
     |      Write string to stream.
     |      Returns the number of characters written (which is always equal to
     |      the length of the string).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _io._TextIOBase:
     |  
     |  encoding
     |      Encoding of the text stream.
     |      
     |      Subclasses should override.
     |  
     |  errors
     |      The error setting of the decoder or encoder.
     |      
     |      Subclasses should override.
     |  
     |  newlines
     |      Line endings translated so far.
     |      
     |      Only line endings translated during reading are considered.
     |      
     |      Subclasses should override.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from IOBase:
     |  
     |  __metaclass__ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _io._IOBase:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  close(...)
     |      Flush and close the IO object.
     |      
     |      This method has no effect if the file is already closed.
     |  
     |  fileno(...)
     |      Returns underlying file descriptor if one exists.
     |      
     |      An IOError is raised if the IO object does not use a file descriptor.
     |  
     |  flush(...)
     |      Flush write buffers, if applicable.
     |      
     |      This is not implemented for read-only and non-blocking streams.
     |  
     |  isatty(...)
     |      Return whether this is an 'interactive' stream.
     |      
     |      Return False if it can't be determined.
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  readable(...)
     |      Return whether object was opened for reading.
     |      
     |      If False, read() will raise IOError.
     |  
     |  readlines(...)
     |      Return a list of lines from the stream.
     |      
     |      hint can be specified to control the number of lines read: no more
     |      lines will be read if the total size (in bytes/characters) of all
     |      lines so far exceeds hint.
     |  
     |  seek(...)
     |      Change stream position.
     |      
     |      Change the stream position to the given byte offset. The offset is
     |      interpreted relative to the position indicated by whence.  Values
     |      for whence are:
     |      
     |      * 0 -- start of stream (the default); offset should be zero or positive
     |      * 1 -- current stream position; offset may be negative
     |      * 2 -- end of stream; offset is usually negative
     |      
     |      Return the new absolute position.
     |  
     |  seekable(...)
     |      Return whether object supports random access.
     |      
     |      If False, seek(), tell() and truncate() will raise IOError.
     |      This method may need to do a test seek().
     |  
     |  tell(...)
     |      Return current stream position.
     |  
     |  truncate(...)
     |      Truncate file to size bytes.
     |      
     |      File pointer is left unchanged.  Size defaults to the current IO
     |      position as reported by tell().  Returns the new size.
     |  
     |  writable(...)
     |      Return whether object was opened for writing.
     |      
     |      If False, read() will raise IOError.
     |  
     |  writelines(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _io._IOBase:
     |  
     |  closed
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _io._IOBase:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class TextIOWrapper(_TextIOBase)
     |  Character and line based layer over a BufferedIOBase object, buffer.
     |  
     |  encoding gives the name of the encoding that the stream will be
     |  decoded or encoded with. It defaults to locale.getpreferredencoding.
     |  
     |  errors determines the strictness of encoding and decoding (see the
     |  codecs.register) and defaults to "strict".
     |  
     |  newline controls how line endings are handled. It can be None, '',
     |  '\n', '\r', and '\r\n'.  It works as follows:
     |  
     |  * On input, if newline is None, universal newlines mode is
     |    enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
     |    these are translated into '\n' before being returned to the
     |    caller. If it is '', universal newline mode is enabled, but line
     |    endings are returned to the caller untranslated. If it has any of
     |    the other legal values, input lines are only terminated by the given
     |    string, and the line ending is returned to the caller untranslated.
     |  
     |  * On output, if newline is None, any '\n' characters written are
     |    translated to the system default line separator, os.linesep. If
     |    newline is '', no translation takes place. If newline is any of the
     |    other legal values, any '\n' characters written are translated to
     |    the given string.
     |  
     |  If line_buffering is True, a call to flush is implied when a call to
     |  write contains a newline character.
     |  
     |  Method resolution order:
     |      TextIOWrapper
     |      _TextIOBase
     |      _IOBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  close(...)
     |  
     |  detach(...)
     |  
     |  fileno(...)
     |  
     |  flush(...)
     |  
     |  isatty(...)
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  read(...)
     |  
     |  readable(...)
     |  
     |  readline(...)
     |  
     |  seek(...)
     |  
     |  seekable(...)
     |  
     |  tell(...)
     |  
     |  truncate(...)
     |  
     |  writable(...)
     |  
     |  write(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  buffer
     |  
     |  closed
     |  
     |  encoding
     |  
     |  errors
     |  
     |  line_buffering
     |  
     |  name
     |  
     |  newlines
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _IOBase:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  readlines(...)
     |      Return a list of lines from the stream.
     |      
     |      hint can be specified to control the number of lines read: no more
     |      lines will be read if the total size (in bytes/characters) of all
     |      lines so far exceeds hint.
     |  
     |  writelines(...)
    
    class UnsupportedOperation(exceptions.ValueError, exceptions.IOError)
     |  Method resolution order:
     |      UnsupportedOperation
     |      exceptions.ValueError
     |      exceptions.IOError
     |      exceptions.EnvironmentError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.ValueError:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.ValueError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.EnvironmentError:
     |  
     |  __reduce__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.EnvironmentError:
     |  
     |  errno
     |      exception errno
     |  
     |  filename
     |      exception filename
     |  
     |  strerror
     |      exception strerror
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message

FUNCTIONS
    open(...)
        Open file and return a stream.  Raise IOError upon failure.
        
        file is either a text or byte string giving the name (and the path
        if the file isn't in the current working directory) of the file to
        be opened or an integer file descriptor of the file to be
        wrapped. (If a file descriptor is given, it is closed when the
        returned I/O object is closed, unless closefd is set to False.)
        
        mode is an optional string that specifies the mode in which the file
        is opened. It defaults to 'r' which means open for reading in text
        mode.  Other common values are 'w' for writing (truncating the file if
        it already exists), and 'a' for appending (which on some Unix systems,
        means that all writes append to the end of the file regardless of the
        current seek position). In text mode, if encoding is not specified the
        encoding used is platform dependent. (For reading and writing raw
        bytes use binary mode and leave encoding unspecified.) The available
        modes are:
        
        ========= ===============================================================
        Character Meaning
        --------- ---------------------------------------------------------------
        'r'       open for reading (default)
        'w'       open for writing, truncating the file first
        'a'       open for writing, appending to the end of the file if it exists
        'b'       binary mode
        't'       text mode (default)
        '+'       open a disk file for updating (reading and writing)
        'U'       universal newline mode (for backwards compatibility; unneeded
                  for new code)
        ========= ===============================================================
        
        The default mode is 'rt' (open for reading text). For binary random
        access, the mode 'w+b' opens and truncates the file to 0 bytes, while
        'r+b' opens the file without truncation.
        
        Python distinguishes between files opened in binary and text modes,
        even when the underlying operating system doesn't. Files opened in
        binary mode (appending 'b' to the mode argument) return contents as
        bytes objects without any decoding. In text mode (the default, or when
        't' is appended to the mode argument), the contents of the file are
        returned as strings, the bytes having been first decoded using a
        platform-dependent encoding or using the specified encoding if given.
        
        buffering is an optional integer used to set the buffering policy.
        Pass 0 to switch buffering off (only allowed in binary mode), 1 to select
        line buffering (only usable in text mode), and an integer > 1 to indicate
        the size of a fixed-size chunk buffer.  When no buffering argument is
        given, the default buffering policy works as follows:
        
        * Binary files are buffered in fixed-size chunks; the size of the buffer
          is chosen using a heuristic trying to determine the underlying device's
          "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.
          On many systems, the buffer will typically be 4096 or 8192 bytes long.
        
        * "Interactive" text files (files for which isatty() returns True)
          use line buffering.  Other text files use the policy described above
          for binary files.
        
        encoding is the name of the encoding used to decode or encode the
        file. This should only be used in text mode. The default encoding is
        platform dependent, but any encoding supported by Python can be
        passed.  See the codecs module for the list of supported encodings.
        
        errors is an optional string that specifies how encoding errors are to
        be handled---this argument should not be used in binary mode. Pass
        'strict' to raise a ValueError exception if there is an encoding error
        (the default of None has the same effect), or pass 'ignore' to ignore
        errors. (Note that ignoring encoding errors can lead to data loss.)
        See the documentation for codecs.register for a list of the permitted
        encoding error strings.
        
        newline controls how universal newlines works (it only applies to text
        mode). It can be None, '', '\n', '\r', and '\r\n'.  It works as
        follows:
        
        * On input, if newline is None, universal newlines mode is
          enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
          these are translated into '\n' before being returned to the
          caller. If it is '', universal newline mode is enabled, but line
          endings are returned to the caller untranslated. If it has any of
          the other legal values, input lines are only terminated by the given
          string, and the line ending is returned to the caller untranslated.
        
        * On output, if newline is None, any '\n' characters written are
          translated to the system default line separator, os.linesep. If
          newline is '', no translation takes place. If newline is any of the
          other legal values, any '\n' characters written are translated to
          the given string.
        
        If closefd is False, the underlying file descriptor will be kept open
        when the file is closed. This does not work when a file name is given
        and must be True in that case.
        
        open() returns a file object whose type depends on the mode, and
        through which the standard file operations such as reading and writing
        are performed. When open() is used to open a file in a text mode ('w',
        'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open
        a file in a binary mode, the returned class varies: in read binary
        mode, it returns a BufferedReader; in write binary and append binary
        modes, it returns a BufferedWriter, and in read/write mode, it returns
        a BufferedRandom.
        
        It is also possible to use a string or bytearray as a file for both
        reading and writing. For strings StringIO can be used like a file
        opened in a text mode, and for bytes a BytesIO can be used like a file
        opened in a binary mode.